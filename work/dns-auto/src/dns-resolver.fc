_ update_dns(slice sender, int public_key, int seq_no, cell dns_dict, cell expiry_dict, slice msg_slice, int host_price, int cell_price, int bit_price) impure {
    int domain_uint = msg_slice~load_uint(256);
    int domain_category = msg_slice~load_int(16);
    int addr_wc = msg_slice~load_int(8);
    int addr_dest = msg_slice~load_uint(256);

    cell categories_dict = new_dict();
    (slice categories_slice, int is_categories_found) = dns_dict.udict_get?(256, domain_uint);
    (int sender_wc, int sender_addr) = parse_std_addr(sender);
    if(is_categories_found) {
        categories_dict = categories_slice~load_dict();
        (slice owner, int is_owner_found) = categories_dict.idict_get?(16, -2);
        throw_unless(71, is_owner_found); ;; host owner not found
        (int owner_wc, int owner_addr) = (owner~load_int(8), owner~load_uint(256));
        throw_unless(74, (sender_wc == owner_wc) & (sender_addr == owner_addr)); ;; not an owner, can't modify the entry.
    } else {
        ;; setting the new owner
        categories_dict~idict_set_builder(16, -2, begin_cell()
            .store_int(sender_wc, 8)
            .store_uint(sender_addr, 256));
    }

    ;; check if we need  to delete the entry first
    ;; (categories_dict, int is_found) = categories_dict.idict_delete?(16, domain_category);

    categories_dict~idict_set_builder(16, domain_category, begin_cell()
        .store_int(addr_wc, 8)
        .store_uint(addr_dest, 256));
    dns_dict~udict_set_builder(256, domain_uint, begin_cell().store_dict(categories_dict));

    int expiry_date = now() + (60 * 60 * 24 * 365); ;; One year
    expiry_dict~udict_set_builder(256, domain_uint, begin_cell().store_uint(32, expiry_date));

    set_data(begin_cell()
        .store_uint(seq_no, 32)
        .store_uint(public_key, 256)
        .store_grams(host_price)
        .store_grams(cell_price)
        .store_grams(bit_price)
        .store_dict(dns_dict) ;; DNS entries dict
        .store_dict(expiry_dict)
        .end_cell());

    return -1;
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    ;; get sender address for saving or checking
    ;; get grams to check the prices
    ;; add special -2 category
    
    slice msg_slice = in_msg_cell.begin_parse();
    int flags = msg_slice~load_uint(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_addr = msg_slice~load_msg_addr();
    int mode = msg_slice~load_uint(8);

    if (mode == 1) {
        slice data_slice = begin_parse(get_data());
        int stored_seqno = data_slice~load_uint(32);
        int public_key = data_slice~load_uint(256);
        int host_price = data_slice~load_grams();
        int cell_price = data_slice~load_grams();
        int bit_price = data_slice~load_grams();
        
        int total_price = host_price + bit_price * in_msg.slice_bits() + cell_price;
        throw_if(101 ,total_price > msg_value); ;; not enough gold

        accept_message();

        int msg_seqno = msg_slice~load_uint(32);
        throw_unless(35, stored_seqno == msg_seqno);

        cell dns_dict = data_slice~load_ref();
        cell expiry_dict = data_slice~load_ref();

        update_dns(sender_addr, public_key, stored_seqno + 1, dns_dict, expiry_dict, msg_slice, host_price, cell_price, bit_price);
        return ();
    }

    throw_if(404, -1); ;; Unknown message mode
    return ();
}

_ process_init(int public_key, int host_price, int cell_price, int bit_price) impure {
    ;; populating new dict with some trash because empty dict doesn't work well.
    cell new_dns_dict = new_dict();
    cell new_cat_dict = new_dict();
    new_cat_dict~idict_set_builder(16, 0, begin_cell().store_uint(1,1));
    new_dns_dict~udict_set_builder(256, 0, begin_cell().store_dict(new_cat_dict));

    cell new_dns_expiry_dict = new_dict();
    new_dns_dict~udict_set_builder(256, 0, begin_cell().store_uint(32, now()));

    set_data(begin_cell()
        .store_uint(1, 32)
        .store_uint(public_key, 256)
        .store_grams(host_price)
        .store_grams(cell_price)
        .store_grams(bit_price)
        .store_dict(new_dns_dict) ;; DNS entries dict
        .store_dict(new_dns_expiry_dict) ;; special expirations dict. key - host_int, value - expiry date
        .end_cell());

    return -1;
}

(int, cell) resolve_single_entry(int str_int, int category, int len, cell dns_dict) {
    (slice categories_slice, int is_found) = dns_dict.udict_get?(256, str_int);
    ifnot(is_found) {
        return (0, new_dict());
    }
    if (category == 0) {
        return (len + 8, categories_slice~load_dict());
    }
    (slice value_slice, int is_found) = categories_slice~load_dict().idict_get?(16, category);
    ifnot(is_found) {
        return (0, new_dict());
    }

    return (len + 8, begin_cell().store_slice(value_slice).end_cell());
}

_ recv_external(slice in_msg) impure {
    var signature = in_msg~load_bits(512);
    cell msg_body = in_msg~load_ref();

    slice data_slice = begin_parse(get_data());
    int stored_seqno = data_slice~load_uint(32);
    int public_key = data_slice~load_uint(256);
    int host_price = data_slice~load_grams();
    int cell_price = data_slice~load_grams();
    int bit_price = data_slice~load_grams();
    
    throw_unless(34, check_signature(cell_hash(msg_body), signature, public_key));
    accept_message();

    slice msg_slice = msg_body.begin_parse();
    int mode = msg_slice~load_uint(8);
    if(mode == 7) {
        ;; Initialization of the contract
        throw_if(32, stored_seqno);
        return process_init(public_key, host_price, cell_price, bit_price);
    }

    cell dns_dict = data_slice~load_ref();
    cell expiry_dict = data_slice~load_ref();

    if (mode == 3) {
        ;; Updating stored public_key
        int new_public_key = msg_slice~load_uint(256);
        set_data(begin_cell()
            .store_uint(stored_seqno, 32)
            .store_uint(new_public_key, 256)
            .store_grams(host_price)
            .store_grams(cell_price)
            .store_grams(bit_price)
            .store_dict(dns_dict) ;; DNS entries dict
            .store_dict(expiry_dict)
            .end_cell());
        return -1;
    }

    if (mode == 22) {
        ;; Updating prices
        int new_host_price = msg_slice~load_grams();
        int new_cell_price = msg_slice~load_grams();
        int new_bit_price = msg_slice~load_grams();
        set_data(begin_cell()
            .store_uint(stored_seqno, 32)
            .store_uint(public_key, 256)
            .store_grams(new_host_price)
            .store_grams(new_cell_price)
            .store_grams(new_bit_price)
            .store_dict(dns_dict) ;; DNS entries dict
            .store_dict(expiry_dict)
            .end_cell());
        return -1;
    }
    
    throw_if(404, -1); ;; Unknown message mode
    return 404;
}

(int, cell) dnsresolve_internal(slice dns_str, int category, int terminator) {
    slice data_slice = get_data().begin_parse();
    int stored_seqno = data_slice~load_uint(32);
    int public_key = data_slice~load_uint(256);
    int host_price = data_slice~load_grams();
    int cell_price = data_slice~load_grams();
    int bit_price = data_slice~load_grams();
    cell dns_dict = data_slice~load_dict();

    int bytes_len = 0;
    int str_int = 0;
    int not_str_found = -1;
    while(not_str_found & dns_str.slice_bits()) {
        int next_byte = dns_str~load_uint(8);
        if (next_byte == terminator) {
            not_str_found = 0;
        } else {
            bytes_len += 1;
            str_int = str_int << 8;
            str_int = str_int + next_byte;
        }
    }

    if (dns_str.slice_bits() > 0) {
        ;; if not looking for a full string
        category = -1;
    }

    throw_if(55, not_str_found); ;; if we got there - there was no following zero, wrong format
    return resolve_single_entry(str_int, category, bytes_len * 8, dns_dict);
}

(int, cell) dnsresolve(slice dns_str, int category) method_id {
    ;; Resolving with a zero-byte as a terminator, as in contest conditions
    return dnsresolve_internal(dns_str, category, 0);    
}

(int, cell) dnsresolve_test(slice dns_str, int category) method_id {
    ;; For the testing using lite-client using dot (code=46) as a terminator
    return dnsresolve_internal(dns_str, category, 46);    
}

int seqno() method_id {
    slice data_slice = get_data().begin_parse();
    return data_slice~load_uint(32);
}

(int, int, int) prices() method_id {
    slice data_slice = get_data().begin_parse();
    data_slice~load_uint(32);
    data_slice~load_uint(256);
    return (data_slice~load_grams(), data_slice~load_grams(), data_slice~load_grams());
}