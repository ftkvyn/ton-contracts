#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

{ ."usage: " @' $0 type ." <workchain-id> <n> <k> [<filename-base>]" cr
  ."Creates a new multisign wallet in specified workchain, with private key saved to or loaded from <filename-base>.pk" cr
  ."('new-multi-wallet.pk' by default)" cr
  ."  n is the number of keys" cr
  ."  k is the number of signs needed for a message" cr
  1 halt
} : usage
$# dup 3 < swap 4 > or ' usage if

$1 parse-workchain-id =: wc    // set workchain id from command line argument
$2 parse-int =: total-keys
$3 parse-int =: sign-keys
def? $4 { @' $4 } { "new-multi-wallet" } cond constant file-base

."Creating new wallet in workchain " wc . cr

// Create new simple wallet
"Asm.fif" include
"TonUtil.fif" include

PROGRAM{
  DECLPROC process_data
  DECLPROC process_local_dict
  process_data PROC:<{
    // 
    c4 PUSH	//  data_cell
    CTOS	//  data_slice
    256 LDU	//  _48 _47
    NIP	//  data_slice
    LDDICT	//  my_dict data_slice
    LDREF	//  my_dict _52 _51
    NIP	//  my_dict data_slice
    LDREF	//  my_dict _54 _53
    DROP	//  my_dict body_cell
    777 PUSHINT	//  my_dict body_cell _18=777
    16 PUSHINT	//  my_dict body_cell _18=777 _19=16
    s3 PUSH
    SWAP	//  my_dict body_cell _18=777 my_dict _19=16
    DICTUGET
    NULLSWAPIFNOT	//  my_dict body_cell signa is_found
    61 THROWIFNOT
    333 PUSHINT	//  my_dict body_cell signa _25=333
    16 PUSHINT	//  my_dict body_cell signa _25=333 _26=16
    s4 PUSH
    SWAP	//  my_dict body_cell signa _25=333 my_dict _26=16
    DICTUGET
    NULLSWAPIFNOT	//  my_dict body_cell signa key_slice is_found
    61 THROWIFNOT
    539 PUSHINT	//  my_dict body_cell signa key_slice _32=539
    16 PUSHINT	//  my_dict body_cell signa key_slice _32=539 _33=16
    s1 s2 XCHG
    s1 s5 XCHG	//  key_slice body_cell signa _32=539 my_dict _33=16
    DICTUGET
    NULLSWAPIFNOT	//  key_slice body_cell signa _59 _60
    NIP	//  key_slice body_cell signa is_found
    62 THROWIF
    s0 s2 XCHG	//  signa body_cell key_slice
    256 LDU	//  signa body_cell _62 _61
    DROP	//  signa body_cell my_key
    SWAP	//  signa my_key body_cell
    CTOS	//  signa my_key _42
    HASHSU	//  signa my_key _43
    s0 s2 XCHG
    SWAP	//  _43 signa my_key
    CHKSIGNU	//  is_signed_well
    34 THROWIFNOT
  }>
  process_local_dict PROC:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  data_slice
    256 LDU	//  _26 _25
    NIP	//  data_slice
    LDREF	//  _28 _27
    NIP	//  data_slice
    LDREF	//  _30 _29
    DROP	//  keys_dict
    101 PUSHINT	//  keys_dict _13=101
    8 PUSHINT	//  keys_dict _13=101 _14=8
    s2 PUSH
    SWAP	//  keys_dict _13=101 keys_dict _14=8
    DICTUGET
    NULLSWAPIFNOT	//  keys_dict _31 _32
    NIP	//  keys_dict is_found
    99 THROWIFNOT
    99 PUSHINT	//  keys_dict _20=99
    8 PUSHINT	//  keys_dict _20=99 _21=8
    s1 s2 XCHG	//  _20=99 keys_dict _21=8
    DICTUGET
    NULLSWAPIFNOT	//  _33 _34
    NIP	//  is_found
    93 THROWIF
  }>
  recv_internal PROC:<{
    DROP
  }>
  recv_external PROC:<{
    ACCEPT
    //  in_msg
    process_local_dict CALLDICT
    9 PUSHPOW2	//  in_msg _4=512
    LDSLICEX	//  signa in_msg
    LDREF	//  signa _65 _64
    DROP	//  signa body_cell
    c4 PUSH	//  signa body_cell data_cell
    CTOS	//  signa body_cell data_slice
    256 LDU	//  signa body_cell my_key data_slice
    s2 PUSH	//  signa body_cell my_key data_slice body_cell
    CTOS	//  signa body_cell my_key data_slice _18
    HASHSU	//  signa body_cell my_key data_slice _19
    s4 PUSH
    s3 PUSH	//  signa body_cell my_key data_slice _19 signa my_key
    CHKSIGNU	//  signa body_cell my_key data_slice is_signed_well
    34 THROWIFNOT
    LDREF	//  signa body_cell my_key _69 _68
    DROP	//  signa body_cell my_key _24
    CTOS	//  signa body_cell my_key data_count_slice
    8 LDU	//  signa body_cell my_key _71 _70
    DROP	//  signa body_cell my_key counter
    123 ADDCONST	//  signa body_cell my_key counter
    NEWC	//  signa body_cell my_key counter _34
    8 STU	//  signa body_cell my_key _36
    ENDC	//  signa body_cell my_key updated_data_cell
    NEWDICT	//  signa body_cell my_key updated_data_cell my_dict
    NEWC	//  signa body_cell my_key updated_data_cell my_dict _41
    s3 PUSH
    SWAP	//  signa body_cell my_key updated_data_cell my_dict my_key _41
    256 STU	//  signa body_cell my_key updated_data_cell my_dict _43
    333 PUSHINT	//  signa body_cell my_key updated_data_cell my_dict _43 _44=333
    16 PUSHINT	//  signa body_cell my_key updated_data_cell my_dict _43 _44=333 _45=16
    s2 s3 XCHG
    s1 s2 XCHG	//  signa body_cell my_key updated_data_cell _43 _44=333 my_dict _45=16
    DICTUSETB	//  signa body_cell my_key updated_data_cell my_dict
    NEWC	//  signa body_cell my_key updated_data_cell my_dict _48
    SWAP
    s0 s5 XCHG	//  my_dict body_cell my_key updated_data_cell _48 signa
    STSLICER	//  my_dict body_cell my_key updated_data_cell _49
    777 PUSHINT	//  my_dict body_cell my_key updated_data_cell _49 _50=777
    16 PUSHINT	//  my_dict body_cell my_key updated_data_cell _49 _50=777 _51=16
    s2 s3 XCHG
    s1 s2 XCHG
    s1 s6 XCHG	//  updated_data_cell body_cell my_key _49 _50=777 my_dict _51=16
    DICTUSETB	//  updated_data_cell body_cell my_key my_dict
    NEWC	//  updated_data_cell body_cell my_key my_dict _53
    s1 s2 XCHG	//  updated_data_cell body_cell my_dict my_key _53
    256 STU	//  updated_data_cell body_cell my_dict _55
    STDICT	//  updated_data_cell body_cell _56
    s1 s2 XCHG	//  body_cell updated_data_cell _56
    STREF	//  body_cell _57
    STREF	//  _58
    ENDC	//  _59
    c4 POP
    process_data CALLDICT
  }>
}END>c

constant code

dictnew constant keys-dict

keys-dict
1
{
    dup
    "key_" swap (.) +".pk" $+
    load-generate-keypair
    drop // private key
    <b swap B, b> <s .s
    over 100 + 3 roll 8 udict!+ 0= abort"key already added"
    swap
     1 +
} total-keys times
."done generating/loading keys" cr

drop // counter
constant keys-dict

"key_1.pk"
load-generate-keypair
constant wallet_pk // private key
drop // public key

<b total-keys 8 u, sign-keys 8 u,
   keys-dict ref,
b>  constant storage

."Storage: " cr storage <s csr. cr

<b b{0011} s, code ref, storage ref, null dict, b> constant state_init // create StateInit
state_init
dup ."StateInit: " <s csr. cr
dup hash wc swap 2dup 2constant wallet_addr
."new wallet address = " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr
storage
dup ."signing message: " <s csr. cr
dup hash wallet_pk ed25519_sign_uint rot
<b b{1000100} s, wallet_addr addr, b{000010} s, state_init <s s, b{0} s, total-keys 8 u, sign-keys 8 u, b>
dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr
file-base +"-query.boc" tuck B>file
."(Saved wallet creating query to file " type .")" cr
