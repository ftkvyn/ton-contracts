;; Simple wallet smart contract

() recv_internal(slice in_msg) impure {
  ;; do nothing for internal messages
}

() save_internal_data(int n, int k, int seq_num, cell keys_dict, cell transactions_dict) impure {
  set_data(begin_cell()
      .store_uint(n, 8)
      .store_uint(k, 8)
      .store_uint(seq_num, 32)
      .store_dict(keys_dict)
      .store_dict(transactions_dict)
      .end_cell());
}

;; (int n, int k, int seq_num, cell keys_dict, cell transactions_dict)
(int, int, int, cell, cell) load_internal_data() {
    slice data_slice = get_data().begin_parse();
    int n = data_slice~load_uint(8);
    int k = data_slice~load_uint(8);
    int seq_num = data_slice~load_uint(32);
    cell keys_dict = data_slice~load_dict();
    cell transactions_dict = data_slice~load_dict();

    return (n, k, seq_num, keys_dict, transactions_dict);
}

() garbage_collect(int seq_num, cell transactions_dict) {
    int counter = 1;
    int now_time = now();
    repeat(seq_num) {
      (slice tran_slice, int is_found) = transactions_dict.udict_get?(32, counter);
      if (is_found) {
          (int is_executed, int expires) = (tran_slice~load_uint(1), tran_slice~load_uint(32));
          if ( ((counter < seq_num) & is_executed) | (expires < now_time)) {
              transactions_dict~udict_delete_get?(32, counter);
          }
      }
      counter += 1;
    }
}

() execute_order(cell ext_message, int mode) {
    send_raw_message(ext_message, mode);
}

int process_message(slice in_msg, int n, int k, int seq_num, cell keys_dict, cell transactions_dict) impure {
    cell signs_dict = in_msg~load_ref();
    throw_if(36, signs_dict.dict_empty?()); 
    cell order = in_msg~load_ref();
    int order_hash = cell_hash(order);
    slice order_slice = order.begin_parse();
    (int msg_seqno, int valid_until) = (order_slice~load_uint(32), order_slice~load_uint(32));
    int mode = order_slice~load_uint(8);
    cell ext_message = order_slice~load_ref();
    int now_time = now();
    throw_if(35, valid_until < now_time);
    ;; msg_seqno == seq_num for new messages and msg_seqno < seq_num for additional signs
    throw_if(34, msg_seqno > seq_num); 
    throw_if(33, msg_seqno < 1);

    (slice tran_slice, int is_transaction_found_in_local_storage) = transactions_dict.udict_get?(32, msg_seqno);
    ;; check if transaction was garbage collected.
    throw_if(40, (msg_seqno < seq_num) & (is_transaction_found_in_local_storage == 0));
    if (msg_seqno == seq_num) {
      seq_num += 1;
    }
    accept_message();
    cell confirmed_signs_dict = new_dict();
    int signed_num = 0;
    if (is_transaction_found_in_local_storage) {
      (int is_executed, int expires) = (tran_slice~load_uint(1), tran_slice~load_uint(32));
      throw_if(37, is_executed);
      throw_if(38, expires < now_time);
      signed_num = tran_slice~load_uint(8);
      confirmed_signs_dict = tran_slice~load_ref();
      cell original_order = tran_slice~load_ref();
      throw_unless(41, cell_hash(original_order) == order_hash);
    }
    
    int counter = 1;
    repeat (n) {
      (slice signature_slice, int is_found) = signs_dict.udict_get?(8, counter);
      if (is_found) {
          ;; there is a signature in a message.
          (slice is_allready_signed_slice, int is_found) = confirmed_signs_dict.udict_get?(8, counter);
          int is_allready_signed = 0;
          if (is_found) {
            is_allready_signed = is_allready_signed_slice~load_uint(1);
          }           
          ifnot (is_allready_signed & is_found) {
             ;; was not signed by this key before.
             var signature = signature_slice~load_bits(512);
             (slice key_slice, int is_found) = keys_dict.udict_get?(8, counter);
             ifnot(is_found) {
               return 91;
             }
             var public_key = key_slice~load_uint(256);
             int is_signed_well = check_signature(order_hash, signature, public_key);
             if (is_signed_well) {
                signed_num += 1;
                ;; dump_stack();
                confirmed_signs_dict~udict_set_builder(8, counter, begin_cell().store_uint(1, 1));

                if (signed_num == k) {
                  if (is_transaction_found_in_local_storage) {
                     transactions_dict~udict_delete_get?(32, msg_seqno);
                  }
                  transactions_dict~udict_set_builder(32, msg_seqno, 
                    begin_cell()
                    .store_uint(1, 1) ;; is_executed
                    );
                  execute_order(ext_message, mode);
                  garbage_collect(seq_num, transactions_dict);
                  save_internal_data(n, k, seq_num, keys_dict, transactions_dict);
                  return -1;
                }
             }
          }
      }   
      counter += 1;   
    }

    ifnot(signed_num) {
      return 0;
    }

    if (is_transaction_found_in_local_storage) {
        transactions_dict~udict_delete_get?(32, msg_seqno);
    }
    transactions_dict~udict_set_builder(32, msg_seqno, 
          begin_cell()
          .store_uint(0, 1) ;; is_executed
          .store_uint(valid_until, 32)
          .store_uint(signed_num, 8)
          .store_dict(confirmed_signs_dict)
          .store_ref(order)
          );
    garbage_collect(seq_num, transactions_dict);
    save_internal_data(n, k, seq_num, keys_dict, transactions_dict);
    return -1;
}

int recv_external(slice in_msg) impure {
    (int n, int k, int seq_num, cell keys_dict, cell transactions_dict) = load_internal_data();

    if (seq_num == 0) { 
      accept_message();
      ;; updating seq_num to 1 so that we will never land here again.
      save_internal_data(n, k, 1, keys_dict, transactions_dict);
    } else {
      return process_message(in_msg, n, k, seq_num, keys_dict, transactions_dict);
    }
    return -1;
}

;; Get methods

int seqno() method_id {
    slice data_slice = get_data().begin_parse();
    data_slice~load_uint(8);
    data_slice~load_uint(8);
    return data_slice~load_uint(32);
}

_ load_order_by_condition(int key_num, int is_signed) {
    (int n, int k, int seq_num, cell keys_dict, cell transactions_dict) = load_internal_data();
    var orders_list = nil;
    int counter = 1;
    int now_time = now();
    repeat(seq_num) {
      (slice tran_slice, int is_found) = transactions_dict.udict_get?(32, counter);
      if (is_found) {
          ;; dump_stack();
          (int is_executed, int expires) = (tran_slice~load_uint(1), tran_slice~load_uint(32));
          tran_slice~load_uint(8); ;; signed_num
          cell confirmed_signs_dict = tran_slice~load_ref();
          cell original_order = tran_slice~load_ref();
          ifnot ( ((counter < seq_num) & is_executed) | (expires < now_time)) {
              if (key_num == 0) {
                ;; ToDo: extract addr, amount, message
                orders_list = cons(original_order, orders_list);
              } else {
                (slice is_allready_signed_slice, int is_found) = confirmed_signs_dict.udict_get?(8, key_num);
                if (is_found) {
                  int is_allready_signed = is_allready_signed_slice~load_uint(1);
                  if (is_signed == is_allready_signed) {
                      orders_list = cons(original_order, orders_list);
                  }
                }
              } 
          }
      }
      counter += 1;
    }
    return orders_list;
}

int get_key_num(int pubkey) {
    (int n, int k, int seq_num, cell keys_dict, cell transactions_dict) = load_internal_data();
    int counter = 0;
    repeat(n) { 
        (slice key_slice, int is_found) = keys_dict.udict_get?(8, counter);
        int public_key = key_slice~load_uint(256);
        if (public_key == pubkey) {
          return counter;
        }
    }
    return -1;
}

_ pending_orders() method_id {
    return load_order_by_condition(0, 0);
}

_ is_signed_orders(int pubkey, int is_signed) {
  int key_num = get_key_num(pubkey);
  return load_order_by_condition(key_num, is_signed);
}

_ signed_orders(int pubkey) method_id {
    return is_signed_orders(pubkey, -1);
}

_ not_signed_orders(int pubkey) method_id {
    return is_signed_orders(pubkey, 0);
}