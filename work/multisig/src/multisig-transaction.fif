#!/usr/bin/env fift -s
"TonUtil.fif" include

{ ."usage: " @' $0 type ." <wallet-name> <key-number> <dest-addr> <seqno> <amount> <message-text> [-B <body-boc>] [<savefile>]" cr
  ."Creates a request to simple wallet created by new-wallet.fif, with private key loaded from file <key-name>.pk "
  ."and address from <wallet-name>.addr, and saves it into <savefile>.boc ('multisig-query.boc' by default)" cr 1 halt
} : usage
def? $8 { @' $7 "-B" $= { @' $8 =: body-boc-file [forget] $8 def? $9 { @' $9 =: $7 [forget] $9 } { [forget] $7 } cond
  @' $# 2- =: $# } if } if
$# dup 6 < swap 7 > or ' usage if

true constant bounce

$1 =: wallet-name
$2 parse-int =: key-number
$3 bounce parse-load-address =: bounce 2=: dest_addr
$4 parse-int =: seqno
$5 $>GR =: amount
$6 =: message-text
def? $7 { @' $7 } { "multisig-query" } cond constant savefile
3 constant send-mode  // mode for SENDRAWMSG: +1 - sender pays fees, +2 - ignore errors
60 60 * 24 * 3 * constant timeout   // external message expires in 3 days

wallet-name +".addr" load-address
2dup 2constant wallet_addr
."Source wallet address = " 2dup .addr cr 6 .Addr cr
"key_" key-number (.) +".pk" $+ load-keypair nip constant wallet_pk

def? body-boc-file { @' body-boc-file file>B B>boc } { <b 0 32 u, message-text $, b> } cond
constant body-cell

."Transferring " amount .GR ."to account "
dest_addr 2dup bounce 7 + .Addr ." = " .addr 
."seqno=0x" seqno x. ."bounce=" bounce . cr
."Body of transfer message is " body-cell <s csr. cr
  
// create a message
<b b{01} s, bounce 1 i, b{000100} s, dest_addr addr, amount Gram, 0 9 64 32 + + 1+ u, 
  body-cell <s 2dup s-fits? not rot over 1 i, -rot { drop body-cell ref, } { s, } cond
b>
<b seqno 32 u, now timeout + 32 u, send-mode 8 u, swap ref, b>
constant order
order ."signing message: " <s csr. cr
order hash wallet_pk ed25519_sign_uint constant sign

dictnew constant signs-dict
<b sign B, b> <s key-number signs-dict 8 udict!

drop
constant signs-dict

<b b{1000100} s, wallet_addr addr, 0 Gram, b{00} s,
   signs-dict dict, 
   order ref, b> constant result-message

result-message
dup ."resulting external message: " <s csr. cr
2 boc+>B dup Bx. cr
savefile +".boc" tuck B>file
."(Saved to file " type .")" cr

// For testing purposes
<b signs-dict dict, 
   order ref, b> <s constant inner-message

