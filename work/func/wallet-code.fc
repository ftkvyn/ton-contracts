;; Simple wallet smart contract

() init_data() impure {
  set_data(begin_cell().store_uint(10, 32).store_uint(102030, 256).end_cell());
}

int process_msg(slice in_msg) impure {
  var items_count = in_msg~load_uint(32);

  repeat (items_count) {
    var value3 = in_msg~load_uint(256);
    var value4 = in_msg~load_bits(512);
    var is_good = check_signature(slice_hash(in_msg), value4, value3);
    throw_if(34, is_good);
  }
  return items_count;
}

() recv_internal(slice in_msg) impure {
  init_data();

  var items_count = 3;

  var msg = begin_cell()
    .store_uint(items_count, 32);

  repeat (items_count) {
    var slc_key = begin_cell()
      .store_uint(172839, 256)
      .end_cell();

    var slc_sig = begin_cell()
      .store_uint(6646, 256)
      .store_uint(4232, 256)
      .end_cell();

    msg = msg
      .store_slice(begin_cell()
        .store_uint(172839, 256)
        .end_cell().begin_parse())
      .store_slice(begin_cell()
        .store_uint(6646, 256)
        .store_uint(4232, 256)
        .end_cell().begin_parse());
  }

  var end_msg = msg    
    .end_cell();

  process_msg(end_msg.begin_parse());
}

() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  var (msg_seqno, valid_until) = (cs~load_uint(32), cs~load_uint(32));
  throw_if(35, valid_until < now());
  var ds = get_data().begin_parse();
  var (stored_seqno, public_key) = (ds~load_uint(32), ds~load_uint(256));
  ds.end_parse();
  throw_unless(33, msg_seqno == stored_seqno);
  throw_unless(34, check_signature(slice_hash(in_msg), signature, public_key));
  accept_message();
  cs~touch();
  while (cs.slice_refs()) {
    var mode = cs~load_uint(8);
    send_raw_message(cs~load_ref(), mode);
  }
  cs.end_parse();
  set_data(begin_cell().store_uint(stored_seqno + 1, 32).store_uint(public_key, 256).end_cell());
}

;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

int seqnum() method_id {
  return get_data().begin_parse().preload_uint(32);
}