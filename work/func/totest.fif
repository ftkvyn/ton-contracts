"Asm.fif" include
"TonUtil.fif" include

// automatically generated from `stdlib.fc` `totest.fc` 
PROGRAM{
  DECLPROC process_data
  DECLPROC process_local_dict
  DECLPROC main
  process_data PROC:<{
    c4 PUSH
    CTOS
    256 LDU
    NIP
    LDDICT
    LDREF
    NIP
    LDREF
    DROP
    777 PUSHINT
    16 PUSHINT
    s3 PUSH
    SWAP
    DICTUGET
    NULLSWAPIFNOT
    61 THROWIFNOT
    333 PUSHINT
    16 PUSHINT
    s4 PUSH
    SWAP
    DICTUGET
    NULLSWAPIFNOT
    61 THROWIFNOT
    539 PUSHINT
    16 PUSHINT
    s1 s2 XCHG
    s1 s5 XCHG
    DICTUGET
    NULLSWAPIFNOT
    NIP
    62 THROWIF
    s0 s2 XCHG
    256 LDU
    DROP
    SWAP
    CTOS
    HASHSU
    s0 s2 XCHG
    SWAP
    CHKSIGNU
    34 THROWIFNOT
  }>
  process_local_dict PROC:<{
    c4 PUSH
    CTOS
    256 LDU
    NIP
    LDREF
    NIP
    LDREF
    DROP
    101 PUSHINT
    8 PUSHINT
    s2 PUSH
    SWAP
    DICTUGET
    NULLSWAPIFNOT
    NIP
    99 THROWIFNOT
    102 PUSHINT
    8 PUSHINT
    s2 PUSH
    SWAP
    DICTUGET
    NULLSWAPIFNOT
    NIP
    99 THROWIFNOT
    103 PUSHINT
    8 PUSHINT
    s2 PUSH
    SWAP
    DICTUGET
    NULLSWAPIFNOT
    NIP
    99 THROWIFNOT
    99 PUSHINT
    8 PUSHINT
    s1 s2 XCHG
    DICTUGET
    NULLSWAPIFNOT
    NIP
    93 THROWIF
  }>
  main PROC:<{
    LDREF
    NIP
    LDREF
    9 PUSHPOW2
    LDSLICEX
    DROP
    c4 PUSH
    CTOS
    256 LDU
    s3 PUSH
    CTOS
    HASHSU
    s3 PUSH
    s3 PUSH
    CHKSIGNU
    34 THROWIFNOT
    LDREF
    DROP
    CTOS
    8 LDU
    DROP
    123 ADDCONST
    NEWC
    8 STU
    ENDC
    NEWDICT
    NEWC
    s3 PUSH
    SWAP
    256 STU
    333 PUSHINT
    16 PUSHINT
    s2 s3 XCHG
    s1 s2 XCHG
    DICTUSETB
    NEWC
    SWAP
    s0 s4 XCHG
    STSLICER
    777 PUSHINT
    16 PUSHINT
    s2 s3 XCHG
    s1 s2 XCHG
    s1 s5 XCHG
    DICTUSETB
    NEWC
    s1 s2 XCHG
    256 STU
    STDICT
    STREF
    STREF
    ENDC
    c4 POP
    process_data CALLDICT
  }>
}END>c



constant code

<b 10 8 u, 
b> constant count_data

dictnew constant keys-dict

keys-dict
1
{
    dup
    "key_" swap (.) +".pk" $+
    load-generate-keypair
    drop // private key
    <b swap B, b> <s .s
    over 100 + 3 roll 8 udict!+ 0= abort"key already added"
    swap
     1 +
} 3 times
."done" cr

drop // counter
constant keys-dict

."dict:"
keys-dict .s drop
cr 

101 keys-dict 8 udict@
.s drop drop

102 keys-dict 8 udict@
.s drop drop

103 keys-dict 8 udict@
.s drop drop

cr cr

<b "key_1.pk" load-generate-keypair
   constant key1_pk
   B,
   count_data ref,
   keys-dict ref,
b>  constant storage

."Storage: " cr storage <s csr. cr

<b 2 8 u, 
b> constant body

."Body: " cr body <s csr. cr

body hash key1_pk ed25519_sign_uint constant signa

."Sign: " cr signa .s cr

<b keys-dict ref, body ref, signa B, b> <s constant message

."Message: " cr message csr. cr

0 tuple 0x076ef1ea , // magic
0 , 0 , // actions msg_sents
1570470873 , // unix_time
1 , 1 , 0 , // block_lt, trans_lt, rand_seed
0 tuple 9223372036854775807 , dictnew , , // remaining balance
0 , dictnew , // contract_address, global_config
1 tuple // wrap to another tuple
constant c7 

message 0 code <s storage c7 runvmctx

constant updated_storage
constant exit_code
."Exit code " exit_code . cr
."Updated storage: " cr updated_storage <s csr. cr