{-
  /------------------------------------------------------------------------\
  | Created for: Telegram (Open Network) Blockchain Contest                |
  |      Task 2: DNS Resolver (Automatically registering)                  |
  >------------------------------------------------------------------------<
  | Author: Oleksandr Murzin (tg: @skydev / em: alexhacker64@gmail.com)    |
  |         October 2019                                                   |
  \------------------------------------------------------------------------/
-}

;;===========================================================================;;
;; stdlib.fc partial import (for independence and stability)                 ;;
;;===========================================================================;;
;; another important factor is that if in future update stdlib.fc will receive
;; update with any of custom ASM instructions implemented below, it will trash
;; the compilation of the contract!!!

;; func adns-logic.fc 2>&1 | grep undefined | grep -v unknown | awk '{print $3}' 
;;		| cut -c 3- | sed s/\`// | xargs -L 1 -I '{}' grep -F '{}' ../stdlib.fc

slice begin_parse(cell c) asm "CTOS";
(slice, int) load_grams(slice s) asm( -> 1 0) "LDGRAMS";
cell get_data() asm "c4 PUSH";
() set_data(cell c) impure asm "c4 POP";
builder begin_cell() asm "NEWC";
builder store_dict(builder b, cell c) asm(c b) "STDICT";
builder store_grams(builder b, int x) asm "STGRAMS";
cell end_cell(builder b) asm "ENDC";
builder store_slice(builder b, slice s) asm "STSLICER";
() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";
int now() asm "NOW";
(cell, int) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDEL";
int slice_bits(slice s) asm "SBITS";
(int, int) slice_bits_refs(slice s) asm "SBITREFS";
int slice_refs(slice s) asm "SREFS";
int slice_refs_empty?(slice s) asm "SREMPTY";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
cell preload_ref(slice s) asm "PLDREF";
(slice, slice) load_msg_addr(slice s) asm( -> 1 0) "LDMSGADDR";
(int, int) parse_std_addr(slice s) asm "REWRITESTDADDR";
cell idict_get_ref(cell dict, int key_len, int index) asm(index dict key_len) "DICTIGETOPTREF";
int slice_hash(slice s) asm "HASHSU";
cell udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTUSETREF";
(cell, ()) ~udict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTUSETREF";
int dict_empty?(cell c) asm "DICTEMPTY";
() accept_message() impure asm "ACCEPT";
(slice, cell) load_dict(slice s) asm( -> 1 0) "LDDICT";
cell preload_dict(slice s) asm "PLDDICT";
int slice_empty?(slice s) asm "SEMPTY";


;;===========================================================================;;
;; Custom ASM instructions                                                   ;;
;;===========================================================================;;

cell null() asm "NULL";

;; Args: s D n | Success: s' x s'' -1 | Failure: s 0 -> s N N 0
(slice, slice, slice, int) pfxdict_get?(cell dict, int key_len, slice key) 
		asm(key dict key_len) "PFXDICTGETQ" "NULLSWAPIFNOT" "NULLSWAPIFNOT";

;; Args: x k D n | Success: D' -1 | Failure: D 0
(cell, int) pfxdict_set?(cell dict, int key_len, slice key, slice value) 
		asm(value key dict key_len) "PFXDICTSET";

;; Args: k D n | Success: D' -1 | Failure: D 0
(cell, int) pfxdict_delete?(cell dict, int key_len, slice key) 
		asm(key dict key_len) "PFXDICTDEL";

int builder_bits(builder bld) asm "BBITS";

slice slice_last(slice s, int len) asm "SDCUTLAST";

;; Actually, equivalent to dictionaries, provided for clarity
(slice, cell) load_opt_ref(slice s) asm( -> 1 0) "LDOPTREF";
builder store_opt_ref(builder b, cell c) asm(c b) "STOPTREF";

(int, slice, int) idict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMIN" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(int, slice, int) idict_get_max?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMAX" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
{-
(int, cell, int) idict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMINREF" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(int, cell, int) idict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTIMAXREF" "NULLSWAPIFNOT" "NULLSWAPIFNOT";

(int, slice, int) udict_get_min?(cell dict, int key_len) asm (-> 1 0 2) "DICTUMIN" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(int, slice, int) udict_get_max?(cell dict, int key_len) asm (-> 1 0 2) "DICTUMAX" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
-}
(int, cell, int) udict_get_min_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTUMINREF" "NULLSWAPIFNOT" "NULLSWAPIFNOT";
(int, cell, int) udict_get_max_ref?(cell dict, int key_len) asm (-> 1 0 2) "DICTUMAXREF" "NULLSWAPIFNOT" "NULLSWAPIFNOT";

() buy_gas(int gram) asm "BUYGAS";
() set_gas_limit(int gaslim) asm "SETGASLIMIT";

tuple get_c7() asm "c7 PUSH";
int [#]?(tuple t) asm "QTLEN";

int [<int](tuple t) asm "FIRST";
tuple [<tuple](tuple t) asm "FIRST";

tuple [tuple](tuple t, int k) asm "INDEXVAR";
int [int](tuple t, int k) asm "INDEXVAR";

int getglob_int(int k) asm "GETGLOBVAR";
slice getglob_slice(int k) asm "GETGLOBVAR";
() setglob_int(int v, int k) impure asm "SETGLOBVAR";
() setglob_slice(slice v, int k) impure asm "SETGLOBVAR";

;;===========================================================================;;
;; Utility functions                                                         ;;
;;===========================================================================;;

{-
	Data structure:
	Root cell: [OptRef<1b+1r?>:Hashmap<PfxDict:Slice->UInt<32b>,CatTable>:domains]
			   [OptRef<1b+1r?>:Hashmap<UInt<64b>(Time|Hash32)->Slice(DomName)>:gc]
			   [UInt<32b>:stdperiod] [Gram:PPReg] [Gram:PPCell] [Gram:PPBit]
			   [UInt<32b>:lasthousekeeping] 
	<CatTable> := HashmapE 16 ^DNSRecord
	<DNSRecord> := arbitary? not defined anywhere in documentation or internet!
	
	STORED DOMAIN NAME SLICE FORMAT: (#ZeroChars<7b>) (Domain name value)
	#Zeros allows to simultaneously store, for example, com\0 and com\0google\0
	That will be stored as \1com\0 and \2com\0google\0 (pfx tree has restricitons)
	This will allow to resolve more specific requests to subdomains, and resort
	    to parent domain next resolver lookup if subdomain is not found
	com\0goo\0 lookup will, for example look up \2com\0goo\0 and then
	    \1com\0goo\0 which will return \1com\0 (as per pfx tree) with -1 cat
-}

(cell, cell, int, int, int, int, int) load_data() {
	slice cs = get_data().begin_parse();
	return (
		cs~load_dict(),   ;; pfx tree: domains data and exp
		cs~load_dict(),   ;; gc auxillary with expiry and 32 bit hash slice
		cs~load_uint(32), ;; length of this period of time in seconds
		cs~load_grams(),  ;; standard payment for registering a new subdomain
		cs~load_grams(),  ;; price paid for each cell (PPC)
		cs~load_grams(),  ;;                 and bit  (PPB)
		cs~load_uint(32)  ;; last housekeeping done when
	);
}

() store_data(cell dd, cell gc, int sp, int ppr, int ppc, int ppb, int lhk) impure {
	set_data(begin_cell()
			.store_dict(dd) ;; domains data and exp
			.store_dict(gc) ;; keyed expiration time and 32 bit hash slice
			.store_int(sp, 32) ;; standard period
			.store_grams(ppr) ;; price per registration
			.store_grams(ppc) ;; price per cell
			.store_grams(ppb) ;; price per bit
			.store_uint(lhk, 32) ;; last housekeeping
			.end_cell());
}

() send_message(slice addr, int tag,   int query_id, 
                int   body, int grams, int mode) impure {
	;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool 
	;;                src:MsgAddress -> 011000 0x18
	var msg = begin_cell()
		.store_uint (0x18, 6)
		.store_slice(addr)
		.store_grams(grams)
		.store_uint (0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
		.store_uint (tag, 32)
		.store_uint (query_id, 64);
	if (body >= 0) {
		msg~store_uint(body, 32);
	}
	send_raw_message(msg.end_cell(), mode);
}

() housekeeping(cell dd, cell gc, int sp, int ppr, int ppc, int ppb, int lhk) impure {
	int n = now();
	if (n - lhk < 60) { ;; housekeeping cooldown: 1 minute
		;; if recent housekeeping was done, just save
		store_data(dd, gc, sp, ppr, ppc, ppb, lhk);
	} else {
		;; need to do some housekeeping - maybe remove entry with 
		;;     least expiration but only if it is already expired
		;; no iterating and deleting all to not put too much gas gc
		;;     burden on any random specific user request
		;; over time it will do the garbage collection required
		(int mkey, cell name, int succ) = gc.udict_get_min_ref?(64);
		if (succ) { ;; no short circuit optimization, two nested ifs
			int mkn = mkey >> 32;
			if (mkn < n) {
				slice sname = name.begin_parse();
				(slice pfx, slice val, slice tail, int suc2) = 
					dd.pfxdict_get?(1023, sname);
				if (suc2) {
					int exp = val~load_uint(32);
					if (exp == mkn) {
						if (dd~pfxdict_delete?(1023, sname)) {
							gc~udict_delete?(64, mkey);
						}
					} else { ;; stale reference: re-registered entry
						gc~udict_delete?(64, mkey);
						;; it is easier to throw-away it here than
						;; to waste additional gas at register fun
					}
				} else { ;; stale reference: missing entry (?)
					gc~udict_delete?(64, mkey);
					;; this should never happen, but who knows
				}
			}
		}
		store_data(dd, gc, sp, ppr, ppc, ppb, n);
	}
}

int _calcprice(slice val, int ppc, int ppb) { ;; only for internal calcs
	int price = ppc + ;; price per each cell
		        ppb * val.slice_bits(); 
				;; price per bit * number of bits
	while (val.slice_refs()) {
		;; recursively calculate price
		price += _calcprice(val~load_ref().begin_parse(), ppc, ppb);
	}
	return price;
}

;;===========================================================================;;
;; Internal message handler (Code 0)                                         ;;
;;===========================================================================;;

{-
	Internal message cell structure:
	                 8             4           2            1
		int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
		src:MsgAddressInt dest:MsgAddressInt
		value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
		created_lt:uint64 created_at:uint32	
	Internal message data structure:
		[UInt<32b>:op] [UInt<64b>:query_id] [Ref<1r>:name] 
		(if not prolong: [Ref<1r>:value->CatTable])
		
-}

;; Must send at least GR$1 more for possible gas fees!
() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
	;; this time very interested in internal messages
	if (in_msg.slice_bits() < 32) { return(); } ;; simple transfer or short
	slice cs = in_msg_cell.begin_parse();
	int flags = cs~load_uint(4);
	if (flags & 1) { return (); } ;; bounced messages
	slice s_addr = cs~load_msg_addr();
	(int src_wc, int src_addr) = s_addr.parse_std_addr();
	int op = in_msg~load_uint(32);
	if (op == 0) { return(); } ;; simple transfer with comment
	int query_id = 0;
	if (in_msg.slice_bits() >= 64) { query_id = in_msg~load_uint(64); }
	
	if ( (op != 0x72656764) & (op != 0x70726f6c) & (op != 0x75706464) & (op != 0x676f6763)
	   & (op & (1 << 31) == 0) ) { ;; unknown query, return error
		return send_message(s_addr, 0xffffffff, query_id, op, 0, 64);
	}
	(cell domdata, cell gc, int stdper, int ppr, int ppc, int ppb, int lhk) = load_data();
	
	{-
	int ct_bal = 0;
	var c7 = get_c7();
	if (c7.[#]?() >= 1) { ;; we have at least c7[0]
		var glob0 = c7.[<tuple]();
		if (glob0.[#]?() >= 8) { ;; we have enough data to get idx3
			ct_bal = glob0.[tuple](7).[<int](); ;; more optimal than loading again
		}
	}
	-}
	
	if (op == 0x676f6763) { ;; GO, GC! go!!!
		;; Manual garbage collection iteration
		housekeeping(domdata, gc, stdper, ppr, ppc, ppb, 0); ;; forced
		return send_message(s_addr, 0xef6b6179, query_id, op, 0, 64);
	}
	
	slice name = in_msg~load_ref().begin_parse(); ;; external only for simplicity	

	;; R 3201
	
	;; NLB and ZeroCnt checks use 2328 gas
	(_, int name_last_byte) = name.slice_last(8).load_uint(8);
	if (name_last_byte != 0) { ;; name must end with \0! no\0 error
		return send_message(s_addr, 0xee6f5c30, query_id, op, 0, 64); }
		
	int loop = -1;
	int zeros = 0;
	slice cname = name;
	;; better safe then sorry, dont want to catch any of loop bugs
	while (loop) {
		int lval = cname~load_uint(8);
		if (lval == 0) { zeros += 1; }
		if (cname.slice_bits() == 0) { loop = 0; }
	}
	
	;; if (zeros != 1) { ;; too much zero chars (overflow): ov\0
	;;	return send_message(s_addr, 0xef765c30, query_id, op, 0, 64); }
	
	;; R 5629
	
	name = begin_cell().store_uint(zeros, 7).store_slice(name).end_cell().begin_parse();
	
	(slice pfx, slice val, slice tail, int succ) = domdata.pfxdict_get?(1023, name);
	int n = now(); int exp = 0;
	if (succ) {
		exp = val~load_uint(32);
		if (n > exp) { ;; expired domains behave as not registered
			succ = false;
		}
	}
	
	;; R 5937
	
	;; shared code segment for prolong and update not possible
	;; because `if` and `else` branches should both return or both not return
	
	;; ##########################################################################
	if (op == 0x70726f6c) { ;; prol | prolong domain
		if (~ succ) { ;; domain not found: return notf | 2^31
			return send_message(s_addr, 0xee6f7466, query_id, op, 0, 64); }
			
		cell cat_table = begin_cell().store_slice(val).end_cell();
		cell cown = cat_table.idict_get_ref(16, -2);
		if (cown.null?()) { ;; no owner on this domain: no-2
			return send_message(s_addr, 0xee6f2d32, query_id, op, 0, 64); }
			
		slice sown = cown.begin_parse();
		if (sown.slice_bits() != 256 + 32) { ;; bad owner record: bad2
			return send_message(s_addr, 0xe2616432, query_id, op, 0, 64); }
			
		(int do_addr, int do_wc) = (sown~load_uint(256), sown~load_uint(32));
		if ((do_addr != src_addr) | (do_wc != src_wc)) { ;; not owner: nown
			return send_message(s_addr, 0xee6f776e, query_id, op, 0, 64); }
			
		int price = ppr + _calcprice(val, ppc, ppb);
		if ((msg_value - 1000000000) < price) { ;; gr<p: grams - GR$1 < price
			return send_message(s_addr, 0xe7723c70, query_id, op, 0, 64); }
		
		slice value = begin_cell().store_uint(exp + stdper, 32)
			 .store_slice(val).end_cell().begin_parse();
			 
		if (~ domdata~pfxdict_set?(1023, name, value)) { ;; Set ERR | 2^31
			return send_message(s_addr, 0xf3657272, query_id, op, 0, 64); }
			
		int shlow = name.slice_hash() & ((1 << 32) - 1);
		int gckeyO = (exp << 32) | shlow;
		int gckeyN = ((exp + stdper) << 32) | shlow;
		gc~udict_delete?(64, gckeyO); ;; delete old gc entry, add new
		gc~udict_set_ref(64, gckeyN, begin_cell().store_slice(name).end_cell());
		
		housekeeping(domdata, gc, stdper, ppr, ppc, ppb, lhk);
		{- Notice !!!
		   Many different combinations of raw_reserve did not work: reserve 
		     ct_bal + price, reserve price, reserve all but price, etc.
		   Sending directly msg_value - price may not account for gas usage
		     but there is no way to determine currently used gas and price
		-}
		;; raw_reserve(ct_bal + price, 0);
		;; raw_reserve(price, 0);
		;; return send_message(s_addr, 0xef6b6179, query_id, op, 0, 64);
		return send_message(s_addr, 0xef6b6179, query_id, op, msg_value - price, 0);
	}
	;; ##########################################################################
	
	;; R 6132
	cell data = in_msg~load_ref();
	;; R 6186
	
	;; basic check for integrity of dictionary
	ifnot (data.dict_empty?()) { ;; 1000 gas!
		(int dmin, _, int minok) = idict_get_min?(data, 16);
		(int dmax, _, int maxok) = idict_get_max?(data, 16);
		throw_unless(31, minok & maxok & (dmin <= dmax));
	}
	
	;; R 6186
	
	;; ##########################################################################
	if (op == 0x72656764) { ;; regd | register domain
		if (succ) { ;; domain already exists: return alre | 2^31
			return send_message(s_addr, 0xe16c7265, query_id, op, 0, 64); }
		;; 6515
		int price = ppr + _calcprice(data.begin_parse(), ppc, ppb);
		;; 15691
		if ((msg_value - 1000000000) < price) { ;; gr<p: grams - GR$1 < price
			return send_message(s_addr, 0xe7723c70, query_id, op, 0, 64); }
		;; 15830
		slice value = begin_cell().store_uint(n + stdper, 32)
			 .store_slice(data.begin_parse()).end_cell().begin_parse();
		;; 16734
		if (~ domdata~pfxdict_set?(1023, name, value)) { ;; Set ERR | 2^31
			return send_message(s_addr, 0xf3657272, query_id, op, 0, 64); }
		;; 17400
		int gckey = ((n + stdper) << 32) | (name.slice_hash() & ((1 << 32) - 1));
		gc~udict_set_ref(64, gckey, begin_cell().store_slice(name).end_cell());
		;; using ref requires additional cell, but using value (DICTUSET) may
		;;     cause problems with very long names or complex dictionaries
		;; 19342
		housekeeping(domdata, gc, stdper, ppr, ppc, ppb, lhk);
		;; 21764
		;; raw_reserve(ct_bal + price, 0);
		;; 22352
		;; raw_reserve(price, 0);
		;; return send_message(s_addr, 0xef6b6179, query_id, op, 0, 64);
		return send_message(s_addr, 0xef6b6179, query_id, op, msg_value - price, 0);
	} 
	;; ##########################################################################
	
	;; ##########################################################################
	if (op == 0x75706464) { ;; updd | update domain (data)
		if (~ succ) { ;; domain not found: return notf | 2^31
			return send_message(s_addr, 0xee6f7466, query_id, op, 0, 64); }
			
		cell cat_table = begin_cell().store_slice(val).end_cell();
		cell cown = cat_table.idict_get_ref(16, -2);
		if (cown.null?()) { ;; no owner on this domain: no-2
			return send_message(s_addr, 0xee6f2d32, query_id, op, 0, 64); }
		
		slice sown = cown.begin_parse();
		if (sown.slice_bits() != 256 + 32) { ;; bad owner record: bad2
			return send_message(s_addr, 0xe2616432, query_id, op, 0, 64); }
			
		(int do_addr, int do_wc) = (sown~load_uint(256), sown~load_uint(32));
		if ((do_addr != src_addr) | (do_wc != src_wc)) { ;; not owner: nown
			return send_message(s_addr, 0xee6f776e, query_id, op, 0, 64); }
		
		int price = _calcprice(data.begin_parse(), ppc, ppb); ;; update without ppr
		if ((msg_value - 1000000000) < price) { ;; gr<p: grams - GR$1 < price
			return send_message(s_addr, 0xe7723c70, query_id, op, 0, 64); }
		
		slice value = begin_cell().store_uint(exp, 32)
			 .store_slice(data.begin_parse()).end_cell().begin_parse();
			 
		if (~ domdata~pfxdict_set?(1023, name, value)) { ;; Set ERR | 2^31
			return send_message(s_addr, 0xf3657272, query_id, op, 0, 64); }
			
		;; no need to update gc here
		
		housekeeping(domdata, gc, stdper, ppr, ppc, ppb, lhk);
		;; raw_reserve(ct_bal + price, 0);
		;; raw_reserve(price, 0);
		;; return send_message(s_addr, 0xef6b6179, query_id, op, 0, 64);
		return send_message(s_addr, 0xef6b6179, query_id, op, msg_value - price, 0);
	}
	;; ##########################################################################
	
	return (); ;; should NEVER reach this part of code!
}

;;===========================================================================;;
;; External message handler (Code -1)                                        ;;
;;===========================================================================;;

() recv_external(slice in_msg) impure {
	;; not interested at all! but need to init!
	(cell dd, cell gc, int sp, int ppr, int ppc, int ppb, int lhk) = load_data();
	if (lhk == 0) {
		accept_message();
		store_data(dd, gc, sp, ppr, ppc, ppb, now());
	}
}

;;===========================================================================;;
;; Getter methods                                                            ;;
;;===========================================================================;;

;; dnsresolve is defined right below dnsresolvex

;;8m  dns-record-value
(int, cell) dnsresolvex(slice subdomain, int category, int nowtime) method_id {
	cell Null = null(); ;; pseudo-alias
	throw_if(30, subdomain.slice_bits() % 8 != 0); ;; malformed input (~ 8n-bit)
	if (subdomain.slice_bits() == 0) { return (0, Null); } ;; zero-length input
	
	(_, int name_last_byte) = subdomain.slice_last(8).load_uint(8);
	if ((name_last_byte == 0) & (subdomain.slice_bits() == 8)) {
		return (0, Null); ;; zero-length input, but with zero byte
	}
	slice s_name = subdomain;
	if (name_last_byte != 0) {
		s_name = begin_cell().store_slice(subdomain) ;; append zero byte
		                     .store_uint(0, 8).end_cell().begin_parse();
	}
	(_, cell root) = get_data().begin_parse().load_dict();
	
	;; Multiple zero characters seem to be allowed as per github issue response
	;; Lets change the tactics!
		
	int zeros = 0;
	int loop = -1;
	slice cname = s_name;
	;; better safe then sorry, dont want to catch any of loop bugs
	while (loop) {
		int lval = cname~load_uint(8);
		if (lval == 0) { zeros += 1; }
		if (cname.slice_bits() == 0) { loop = 0; }
	}
	
	;; can't move below, will cause errors!
	slice pfx = cname; slice val = cname; 
	slice tail = cname; int succ = 0; int exp = 0;
		
	while (zeros > 0) {
		int _exp = 0;
		slice pfname = begin_cell().store_uint(zeros, 7)
			.store_slice(s_name).end_cell().begin_parse();
		(slice _pfx, slice _val, slice _tail, int _succ) = 
			root.pfxdict_get?(1023, pfname);
		if (_succ) {
			_exp = _val.preload_uint(32);
			if (nowtime > _exp) { _succ = false; } ;; entry expired, skip
		}
		if (_succ) { zeros = 1; } ;; break
		zeros -= 1;
		setglob_slice(_pfx, 101);
		setglob_slice(_val, 102);
		setglob_slice(_tail, 103);
		setglob_int(_succ, 104);
	}
	
	;; Compiler cannot assign those outers inside while for some reason
	
	pfx = getglob_slice(101);
	val = getglob_slice(102);
	tail = getglob_slice(103);
	succ = getglob_int(104);
	
	;; (slice pfx, slice val, slice tail, int succ) = root.pfxdict_get?(1023, s_name);
	if (~ succ) { return (0, Null); } ;; failed to find entry in prefix dictionary
	
	;; Check expiration date, once again, to be sure
	int exp = val~load_uint(32);
	
	if (nowtime > exp) { return (0, Null); } ;; domain expired (consider as missing)
	
	if (~ tail.slice_empty?()) { ;; if we have tail then len(pfx) < len(subdomain)
		category = -1; ;; incomplete subdomain found, must return next resolver (-1)
	}
	int pfx_bits = pfx.slice_bits() - 7;
	cell cat_table = begin_cell().store_slice(val).end_cell();
	;; pfx.slice_bits() will contain 8m, where m is number of bytes in subdomain 
	;;   COUNTING for the zero byte (if structurally correct: no multiple-ZB keys)
	;;   which corresponds to "8m, m=one plus the number of bytes in the subdomain found)
	if (category == 0) {
		return (pfx_bits, cat_table); ;; return cell with entire dictionary for 0
	} else {
		cell cat_found = cat_table.idict_get_ref(16, category);
		return (pfx_bits, cat_found); ;; no need to unslice and cellize the poor cat 
		;; more comments in manual version
	}
}

;; this method will use now() if it is available, otherwise ignore expiration dates
;; to account for expiration dates where c7 is not available use dnsresolvex
(int, cell) dnsresolve(slice subdomain, int category) method_id {
	int nowtime = 0; ;; 0 <= any unsigned integer expiration date
	var c7 = get_c7();
	if (c7.[#]?() >= 1) { ;; we have at least c7[0]
		var glob0 = c7.[<tuple]();
		if (glob0.[#]?() >= 4) { ;; we have enough data to get idx3
			nowtime = glob0.[int](3); ;; c7[0][3]
		}
	}
	return dnsresolvex(subdomain, category, nowtime); 
}

;; getexpiration needs to know the current time to skip any possible expired
;;     subdomains in the chain. it will return 0 if not found or expired.
int getexpirationx(slice subdomain, int nowtime) method_id {
	throw_if(30, subdomain.slice_bits() % 8 != 0); ;; malformed input (~ 8n-bit)
	if (subdomain.slice_bits() == 0) { return 0; } ;; zero-length input
	
	(_, int name_last_byte) = subdomain.slice_last(8).load_uint(8);
	if ((name_last_byte == 0) & (subdomain.slice_bits() == 8)) {
		return 0; ;; zero-length input, but with zero byte
	}
	slice s_name = subdomain;
	if (name_last_byte != 0) {
		s_name = begin_cell().store_slice(subdomain) ;; append zero byte
		                     .store_uint(0, 8).end_cell().begin_parse();
	}
	(_, cell root) = get_data().begin_parse().load_dict();
	
	;; Multiple zero characters seem to be allowed as per github issue response
	;; Lets change the tactics!
		
	int zeros = 0;
	int loop = -1;
	slice cname = s_name;
	;; better safe then sorry, dont want to catch any of loop bugs
	while (loop) {
		int lval = cname~load_uint(8);
		if (lval == 0) { zeros += 1; }
		if (cname.slice_bits() == 0) { loop = 0; }
	}
	
	;; can't move below, will cause errors!
	slice pfx = cname; slice val = cname; 
	slice tail = cname; int succ = 0; int exp = 0;
		
	while (zeros > 0) {
		int _exp = 0;
		slice pfname = begin_cell().store_uint(zeros, 7)
			.store_slice(s_name).end_cell().begin_parse();
		(slice _pfx, slice _val, slice _tail, int _succ) = 
			root.pfxdict_get?(1023, pfname);
		if (_succ) {
			_exp = _val.preload_uint(32);
			if (nowtime > _exp) { _succ = false; } ;; entry expired, skip
		}
		if (_succ) { zeros = 1; } ;; break
		zeros -= 1;
		setglob_slice(_pfx, 101);
		setglob_slice(_val, 102);
		setglob_slice(_tail, 103);
		setglob_int(_succ, 104);
	}
	
	;; Compiler cannot assign those outers inside while for some reason
	
	pfx = getglob_slice(101);
	val = getglob_slice(102);
	tail = getglob_slice(103);
	succ = getglob_int(104);
	
	;; (slice pfx, slice val, slice tail, int succ) = root.pfxdict_get?(1023, s_name);
	if (~ succ) { return 0; } ;; failed to find entry in prefix dictionary
	
	;; Check expiration date, once again, to be sure
	int exp = val~load_uint(32);
	
	return exp;
}

;; this method will use now() if it is available, otherwise ignore expiration dates
;; to account for expiration dates where c7 is not available use getexpirationx
int getexpiration(slice subdomain) method_id {
	int nowtime = 0; ;; 0 <= any unsigned integer expiration date
	var c7 = get_c7();
	if (c7.[#]?() >= 1) { ;; we have at least c7[0]
		var glob0 = c7.[<tuple]();
		if (glob0.[#]?() >= 4) { ;; we have enough data to get idx3
			nowtime = glob0.[int](3); ;; c7[0][3]
		}
	}
	return getexpirationx(subdomain, nowtime); 
}

int getstdperiod() method_id {
	(_, _, int stdper, _, _, _, _) = load_data();
	return stdper;
}

int getppr() method_id {
	(_, _, _, int ppr, _, _, _) = load_data();
	return ppr;
}

int getppc() method_id {
	(_, _, _, _, int ppc, _, _) = load_data();
	return ppc;
}

int getppb() method_id {
	(_, _, _, _, _, int ppb, _) = load_data();
	return ppb;
}

int calcprice(slice val) method_id { ;; only for external gets (not efficient)
	return _calcprice(val, getppc(), getppb());
}

int calcregprice(slice val) method_id { ;; only for external gets (not efficient)
	return getppr() + ;; price per registration
	       _calcprice(val, getppc(), getppb()); 
		   ;; calculate bits and cells price
}