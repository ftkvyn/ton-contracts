#!/usr/bin/env fift -s

/*
  /------------------------------------------------------------------------\
  | Created for: Telegram (Open Network) Blockchain Contest                |
  |      Task 2: DNS Resolver (Automatically registering)                  |
  >------------------------------------------------------------------------<
  | Script: Code logic test toolkit                                        |
  >------------------------------------------------------------------------<
  | Author: Oleksandr Murzin (tg: @skydev / em: alexhacker64@gmail.com)    |
  |         October 2019                                                   |
  \------------------------------------------------------------------------/
  
*/

"TonUtil.fif" include
"Asm.fif" include
{ .s 255 halt } : ^ // inspect stack tool

// Load code
PROGRAM{ "adns-logic.fif" include }END>c constant Code

// Build initial data
<b // pfxtree    gcaux     stdper (100 for testing)
	null dict, null dict, 1000 32 u, 
// PP  reg        cell          bit          lhk
	GR$5 Gram, GR$0.1 Gram, GR$0.001 Gram, 1000 32 u,
b> constant InitialData

// Initialize data variable
variable Data
variable PData
variable MVal
variable MCell
variable MBody
variable Time

InitialData dup Data ! PData !
1000 Time !

// Initialize root of t-data (c7)
{
	0 tuple 0x076ef1ea , // magic
	0 , 0 , // actions msg_sents
	Time @ , // unix_time
	1 , 1 , 0 , // block_lt, trans_lt, rand_seed
	0 tuple GR$1000 , dictnew , , // remaining balance
	0 , dictnew , // contract_address, global_config
	1 tuple // wrap to another tuple
} : c7

123660 constant dnsresolve
113304 constant calcprice
85700 constant calcregprice
110574 constant getexpiration

variable RetCode

{ Time @ + Time ! } : AddTime
{ Data @ <s csr. } : DumpData
{ $, 0 8 u, } : \0,
{ MVal @ MCell @ MBody @ <s 3 roll Code <s Data @ c7 runvmctx
Data @ PData !
."Data state change: " cr cr DumpData Data ! cr DumpData 
."Return code: " dup RetCode ! . cr } : RunVM
{ Code <s Data @ c7 runvmctx drop // data not changed!
."Return code: " dup RetCode ! . cr } : RunVMPure
{ recv_internal RunVM } : VMIntMsg
{ recv_external RunVM } : VMExtMsg
{ <b swap \0, b> <s swap dnsresolve RunVMPure } : DoResolve
{ <b swap $, b> <s swap dnsresolve RunVMPure } : DoResolveNZ
{ <s dup sbits 8 / $@ cr
."Result: " type .", used bits of name: " . cr cr } : ShowResolution
{ <s 256 u@+ 32 u@ swap cr
."Result: " .addr .", used bits of name: " . cr cr } : ShowResolutionAddr

{ RetCode @ 0 = { cr ."TEST FAILED" cr 1 quit } ifnot } : ExpectSuccess
{ RetCode @ 0 = { cr ."TEST FAILED" cr 1 quit } if } : ExpectFailure
{ RetCode @ = { cr ."TEST FAILED" cr 1 quit } ifnot } : ExpectCode

{ PData @ hash Data @ hash = { cr ."TEST FAILED D" cr 1 quit } ifnot } : ExpDataSame
{ PData @ hash Data @ hash = { cr ."TEST FAILED D" cr 1 quit } if } : ExpDataDiffer

{ null? swap 0 = and { cr ."TEST FAILED 0" cr 1 quit } ifnot } : ExpNoDomain
{ null? swap 0 <> and { cr ."TEST FAILED 0" cr 1 quit } ifnot } : ExpNoCat

{ swap <b 0 4 u, b{100} s, swap 8 i, swap 256 u, b> MCell ! } : SetAddress

."Initial data state: " DumpData

// Try registering
GR$10 MVal !
<b 0 4 u, b{100} s, 0 8 i, 1 256 u, b> MCell !
<b 0x72656764 32 u, 1 64 u, 
	<b "Test" \0, b> ref,
	dictnew
		<b "TextTest" $, b> <b swap ref, b> <s 1 rot 16 idict! drop
		<b "Second" $, b> <b swap ref, b> <s 2 rot 16 idict! drop
		<b 1 256 u, 0 32 u, b> <b swap ref, b> <s -2 rot 16 idict! drop
	ref,
b> MBody !

VMIntMsg 1 . ExpectSuccess ExpDataDiffer

999 AddTime

1 "Test" DoResolve 2 . ShowResolution ExpectSuccess 
2 "Test" DoResolve 3 . ShowResolution ExpectSuccess
-2 "Test" DoResolve 4 . ShowResolutionAddr ExpectSuccess

1 AddTime // Not expired yet
1 "Test" DoResolve 5 . ShowResolution ExpectSuccess

// Try registering again (Current time: 1001 !!!)
VMIntMsg 6 . ExpectSuccess ExpDataSame

1 AddTime // Expired now!
1 "Test" DoResolve 7 . ExpectSuccess ExpNoDomain

// Now must work
VMIntMsg 8 . ExpectSuccess ExpDataDiffer

100 AddTime

1 "Test" DoResolve 9 . ShowResolution ExpectSuccess 

// Try updating domain data
<b 0x75706464 32 u, 1 64 u, 
	<b "Test" \0, b> ref,
	dictnew
		<b "New1" $, b> <b swap ref, b> <s 1 rot 16 idict! drop
		<b "New2" $, b> <b swap ref, b> <s 2 rot 16 idict! drop
		<b 1 256 u, 0 32 u, b> <b swap ref, b> <s -2 rot 16 idict! drop
	ref,
b> MBody !

VMIntMsg 10 . ExpectSuccess ExpDataDiffer

100 AddTime

0 2 SetAddress
// Try updating domain data from wrong address
<b 0x75706464 32 u, 1 64 u, 
	<b "Test" \0, b> ref,
	dictnew
		<b "badbadbad" $, b> <b swap ref, b> <s 1 rot 16 idict! drop
		<b "badbadbad" $, b> <b swap ref, b> <s 2 rot 16 idict! drop
		<b 1 256 u, 0 32 u, b> <b swap ref, b> <s -2 rot 16 idict! drop
	ref,
b> MBody !

VMIntMsg 11 . ExpectSuccess ExpDataSame

100 AddTime
// Try prolong domain wrong address
<b 0x70726f6c 32 u, 1 64 u, 
	<b "Test" \0, b> ref,
b> MBody !

VMIntMsg 12 . ExpectSuccess ExpDataSame

0 1 SetAddress

1000 AddTime
// Should not resolve now
1 "Test" DoResolve 13 . ExpectSuccess ExpNoDomain
// Try prolong expired domain
VMIntMsg 14 . ExpectSuccess ExpDataSame
-1000 AddTime // Time machine!

100 AddTime
// Try prolong domain correct address

VMIntMsg 15 . ExpectSuccess ExpDataDiffer

1000 AddTime // Check prolong
1 "Test" DoResolve 16 . ShowResolution ExpectSuccess 

VMIntMsg 17 . ExpectSuccess ExpDataDiffer // Lets prolong again (4000 -> 5000)

// Try removing owner data on domain
<b 0x75706464 32 u, 1 64 u, 
	<b "Test" \0, b> ref,
	dictnew
		<b "Completely" $, b> <b swap ref, b> <s 1 rot 16 idict! drop
		<b "Frozen" $, b> <b swap ref, b> <s 2 rot 16 idict! drop
		// <b 1 256 u, 0 32 u, b> <b swap ref, b> <s -2 rot 16 idict! drop
	ref,
b> MBody !

VMIntMsg 18 . ExpectSuccess ExpDataDiffer

// The domain is headless now

// Try prolong domain
<b 0x70726f6c 32 u, 1 64 u, 
	<b "Test" \0, b> ref,
b> MBody !

VMIntMsg 19 . ExpectSuccess ExpDataSame // Nooooooo!!
1 "Test" DoResolve 20 . ShowResolution ExpectSuccess  // Should still resolve
-2 "Test" DoResolve 21 . ExpectSuccess ExpNoCat // But without owner

800 AddTime

// Try updating domain data
<b 0x75706464 32 u, 1 64 u, 
	<b "Test" \0, b> ref,
	dictnew
		<b "New1" $, b> <b swap ref, b> <s 1 rot 16 idict! drop
		<b "New2" $, b> <b swap ref, b> <s 2 rot 16 idict! drop
		<b 1 256 u, 0 32 u, b> <b swap ref, b> <s -2 rot 16 idict! drop
	ref,
b> MBody !

VMIntMsg 22 . ExpectSuccess ExpDataSame // Nooooooo!!

800 AddTime

1 "Test" DoResolve 23 . ShowResolution ExpectSuccess  // Should still resolve (eq exp)

<b "Test" \0, b> <s getexpiration RunVMPure 5001 =
{ ."getexpiration behaving incorrectly!" cr 1 halt } ifnot

1 AddTime
1 "Test" DoResolve 24 . ExpectSuccess ExpNoDomain // Should not resolve any more

10000 Time !

// Try registering multiple domains with staggered expirations
<b 0x72656764 32 u, 1 64 u, 
	<b "Ultra" \0, b> ref,
	dictnew
		<b "Telegram" $, b> <b swap ref, b> <s 1 rot 16 idict! drop
		<b "GramGram" $, b> <b swap ref, b> <s 2 rot 16 idict! drop
	ref,
b> MBody ! VMIntMsg 25 . ExpectSuccess ExpDataDiffer

100 AddTime

<b 0x72656764 32 u, 1 64 u, 
	<b "Tons" \0, b> ref,
	dictnew
		<b "KiloTON" $, b> <b swap ref, b> <s 1 rot 16 idict! drop
		<b "MegaTON" $, b> <b swap ref, b> <s 2 rot 16 idict! drop
	ref,
b> MBody ! VMIntMsg 26 . ExpectSuccess ExpDataDiffer

100 AddTime

<b 0x72656764 32 u, 1 64 u, 
	<b "Planes" \0, b> ref,
	dictnew
		<b "PaperPlane" $, b> <b swap ref, b> <s 3 rot 16 idict! drop
		<b "AirPlane" $, b> <b swap ref, b> <s 4 rot 16 idict! drop
	ref,
b> MBody ! VMIntMsg 27 . ExpectSuccess ExpDataDiffer

// Test resolution
1 "Ultra" DoResolve 28 . ShowResolution ExpectSuccess
2 "Tons" DoResolve 29 . ShowResolution ExpectSuccess
3 "Planes" DoResolve 30 . ShowResolution ExpectSuccess
1 "Planes" DoResolve 31 . ExpectSuccess ExpNoCat

11050 Time !

// Test expiration
1 "Ultra" DoResolve 32 . ExpectSuccess ExpNoDomain
2 "Tons" DoResolve 33 . ShowResolution ExpectSuccess
3 "Planes" DoResolve 34 . ShowResolution ExpectSuccess

100 AddTime

2 "Tons" DoResolve 35 . ExpectSuccess ExpNoDomain
3 "Planes" DoResolve 36 . ShowResolution ExpectSuccess

100 AddTime

3 "Planes" DoResolve 37 . ExpectSuccess ExpNoDomain

// Test GC run / not run
// Try registering domain - always change

<b 0x72656764 32 u, 1 64 u, 
	<b "Test" \0, b> ref,
	dictnew
		<b "TextTest" $, b> <b swap ref, b> <s 1 rot 16 idict! drop
		<b "Second" $, b> <b swap ref, b> <s 2 rot 16 idict! drop
		<b 1 256 u, 0 32 u, b> <b swap ref, b> <s -2 rot 16 idict! drop
	ref,
b> MBody !

VMIntMsg 38 . ExpectSuccess ExpDataDiffer

30 AddTime

// Try changing domain data to same - should not change 27088

<b 0x75706464 32 u, 1 64 u, 
	<b "Test" \0, b> ref,
	dictnew
		<b "TextTest" $, b> <b swap ref, b> <s 1 rot 16 idict! drop
		<b "Second" $, b> <b swap ref, b> <s 2 rot 16 idict! drop
		<b 1 256 u, 0 32 u, b> <b swap ref, b> <s -2 rot 16 idict! drop
	ref,
b> MBody !

VMIntMsg 39 . ExpectSuccess ExpDataSame

30 AddTime

// Now something should change (gc should run) 
// 31618: gc eats 4.5k gas :(

VMIntMsg 40 . ExpectSuccess ExpDataDiffer
// manual gc: 11182 gas

<b 0x676f6763 32 u, 1 64 u, b> MBody ! // garbage collect manually
VMIntMsg 41 . ExpectSuccess ExpDataDiffer

VMIntMsg 42 . ExpectSuccess ExpDataSame // nothing to garbage collect 8608

1000 AddTime

VMIntMsg 43 . ExpectSuccess ExpDataDiffer // clean and clear - everything is gone

dictnew
	<b "New1" $, b> <b swap ref, b> <s 1 rot 16 idict! drop
	<b "New2" $, b> <b swap ref, b> <s 2 rot 16 idict! drop
	<b 1 256 u, 0 32 u, b> <b swap ref, b> <s -2 rot 16 idict! drop
<s 
calcregprice RunVMPure .GR ^

cr cr ."Tests are completed!!!" cr cr cr
