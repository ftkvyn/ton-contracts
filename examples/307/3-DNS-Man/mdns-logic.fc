{-
  /------------------------------------------------------------------------\
  | Created for: Telegram (Open Network) Blockchain Contest                |
  |      Task 3: DNS Resolver (Manually controlled)                        |
  >------------------------------------------------------------------------<
  | Author: Oleksandr Murzin (tg: @skydev / em: alexhacker64@gmail.com)    |
  |         October 2019                                                   |
  \------------------------------------------------------------------------/
-}

;;===========================================================================;;
;; stdlib.fc partial import (for independence and stability)                 ;;
;;===========================================================================;;
;; another important factor is that if in future update stdlib.fc will receive
;; update with any of custom ASM instructions implemented below, it will trash
;; the compilation of the contract!!!

;; generated with: (may spew out some garbage or duplicate lines)
;; func mdns-logic.fc 2>&1 | grep undefined | grep -v unknown | awk '{print $3}' 
;;		| cut -c 3- | sed s/\`// | xargs -L 1 -I '{}' grep -F '{}' ../stdlib.fc

cell get_data() asm "c4 PUSH";
() set_data(cell c) impure asm "c4 POP";
builder begin_cell() asm "NEWC";
cell end_cell(builder b) asm "ENDC";
slice begin_parse(cell c) asm "CTOS";
int slice_hash(slice s) asm "HASHSU";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
() accept_message() impure asm "ACCEPT";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
cell preload_ref(slice s) asm "PLDREF";
int slice_bits(slice s) asm "SBITS";
(int, int) slice_bits_refs(slice s) asm "SBITREFS";
int slice_empty?(slice s) asm "SEMPTY";
builder store_slice(builder b, slice s) asm "STSLICER";
cell idict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTISETREF";
(cell, ()) ~idict_set_ref(cell dict, int key_len, int index, cell value) asm(value index dict key_len) "DICTISETREF";
(cell, int) idict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTIDEL";
int dict_empty?(cell c) asm "DICTEMPTY";
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
(slice, cell) load_dict(slice s) asm( -> 1 0) "LDDICT";
cell preload_dict(slice s) asm "PLDDICT";
cell idict_get_ref(cell dict, int key_len, int index) asm(index dict key_len) "DICTIGETOPTREF";

;;===========================================================================;;
;; Custom ASM instructions                                                   ;;
;;===========================================================================;;

cell null() asm "NULL";

;; Args: s D n | Success: s' x s'' -1 | Failure: s 0 -> s N N 0
(slice, slice, slice, int) pfxdict_get?(cell dict, int key_len, slice key) 
		asm(key dict key_len) "PFXDICTGETQ" "NULLSWAPIFNOT" "NULLSWAPIFNOT";

;; Args: x k D n | Success: D' -1 | Failure: D 0
(cell, int) pfxdict_set?(cell dict, int key_len, slice key, slice value) 
		asm(value key dict key_len) "PFXDICTSET";

;; Args: k D n | Success: D' -1 | Failure: D 0
(cell, int) pfxdict_delete?(cell dict, int key_len, slice key) 
		asm(key dict key_len) "PFXDICTDEL";

int builder_bits(builder bld) asm "BBITS";

slice slice_last(slice s, int len) asm "SDCUTLAST";

;; Actually, equivalent to dictionaries, provided for clarity
(slice, cell) load_opt_ref(slice s) asm( -> 1 0) "LDOPTREF";
builder store_opt_ref(builder b, cell c) asm(c b) "STOPTREF";

int getglob_int(int k) asm "GETGLOBVAR";
slice getglob_slice(int k) asm "GETGLOBVAR";
() setglob_int(int v, int k) impure asm "SETGLOBVAR";
() setglob_slice(slice v, int k) impure asm "SETGLOBVAR";

;;===========================================================================;;
;; Utility functions                                                         ;;
;;===========================================================================;;

() store_data(int seqno, int public_key, cell root) impure {
	set_data(begin_cell()
			.store_uint(seqno, 32)
			.store_uint(public_key, 256)
			.store_opt_ref(root)
			.end_cell());
}

{-
() exception_handler() impure {
	slice ds = get_data().begin_parse();
	int seqno = ds~load_uint(32) + 1;
	set_data(begin_cell().store_uint(seqno, 32).store_slice(ds).end_cell());
}

() set_exception_handler() impure asm "CONT:<{ exception_handler CALLDICT }> c2 POP";
-}

;;===========================================================================;;
;; Internal message handler (Code 0)                                         ;;
;;===========================================================================;;

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
	;; not interested at all
}

;;===========================================================================;;
;; External message handler (Code -1)                                        ;;
;;===========================================================================;;

{-
	External message structure:
		[Bytes<512b>:signature] [UInt<32b>:seqno] [UInt<6b>:operation]
		[Either b0: inline name (<= 58-x Bytes) or b1: reference-stored name)
		                               x depends on operation
		Use of 6-bit op instead of 32-bit allows to save 4 bytes for inline name
	Inline [Name] structure: [UInt<6b>:length] [Bytes<lengthB>:data]
	Operations (continuation of message):
	00 Contract initialization message (only if seqno = 0) (x=-)
	11 VSet: set specified value to specified subdomain->category (x=2)
		[Int<16b>:category] [Name<?>:subdomain] [Cell<1r>:value]
	12 VDel: delete specified subdomain->category (x=2)
		[Int<16b>:category] [Name<?>:subdomain]
	21 DSet: replace entire category dictionary of domain with provided (x=0)
		[Name<?>:subdomain] [Cell<1r>:new_cat_table]
	22 DDel: delete entire category dictionary of specified domain (x=0)
		[Name<?>:subdomain]
	31 TSet: replace ENTIRE DOMAIN TABLE with the provided tree root cell (x=-)
		[Cell<1r>:new_domains_table]
	32 TDel: nullify ENTIRE DOMAIN TABLE (x=-)
	51 OSet: replace owner public key with a new one (x=-)
		[UInt<256b>:new_public_key]
-}

() recv_external(slice in_msg) impure {
	slice signature = in_msg~load_bits(512);
	slice data = get_data().begin_parse();
	int stored_seqno = data~load_uint(32);
	int public_key = data~load_uint(256);
	int shash = slice_hash(in_msg);
	int provided_seqno = in_msg~load_uint(32);
	throw_unless(33, provided_seqno == stored_seqno);
	throw_unless(34, check_signature(shash, signature, public_key));
	accept_message(); ;; message is signed by owner, sanity not guaranteed yet
	;; set_exception_handler();
	cell root = data~load_opt_ref(); ;; tree root (dictionary with domains)
	int op = in_msg~load_uint(6);
	int is_name_ref = (in_msg~load_uint(1) == 1);
	;; 00 Contract initialization message (only if seqno = 0)
	if ((op == 0) & (stored_seqno == 0)) {
		;; reinitialize data, set seqno = 1
		;; possible rollover after 2^32 is not critical because it does not
		;;   change any data, and requires owner signature anyway
		return store_data(stored_seqno + 1, public_key, root);
	}
	;; lets assume at this point that special operations 00..09 are handled
	throw_if(44, op < 10);
	slice name = data; ;; anything! better do not begin or it costs much gas
	cell cat_table = null();
	int cat = 0;
	if (op < 20) {
		;; for operations with codes 10..19 category is required
		cat = in_msg~load_int(16);
	}
	int zeros = 0;
	if (op < 30) {
		;; for operations with codes 10..29 name is required
		if (is_name_ref) {
			;; name is stored in separate referenced cell
			name = in_msg~load_ref().begin_parse();
		} else {
			;; name is stored inline
			int name_len = in_msg~load_uint(6) * 8;
			name = in_msg~load_bits(name_len);
		}
		;; at least one character not counting \0
		throw_unless(38, name.slice_bits() >= 16);
		;; name shall end with \0
		(_, int name_last_byte) = name.slice_last(8).load_uint(8);
		throw_unless(40, name_last_byte == 0);
		
		;; Multiple zero characters seem to be allowed as per github issue response
		;; Lets change the tactics!
		
		int loop = -1;
		slice cname = name;
		;; better safe then sorry, dont want to catch any of loop bugs
		while (loop) {
			int lval = cname~load_uint(8);
			if (lval == 0) { zeros += 1; }
			if (cname.slice_bits() == 0) { loop = 0; }
		}
		;; throw_unless(39, zeros == 1);
	}
	;; operation with codes 10..19 manipulate category dict
	;; lets try to find it and store into a variable
	;; operations with codes 20..29 replace / delete dict, no need
	name = begin_cell().store_uint(zeros, 7).store_slice(name).end_cell().begin_parse();
	if (op < 20) {
		;; lets resolve the name here so as not to duplicate the code
		(slice pfx, slice val, slice tail, int succ) = 
			root.pfxdict_get?(1023, name);
		if (succ) {
			;; must match EXACTLY to prevent accident changes
			throw_unless(35, tail.slice_empty?()); 
			cat_table = begin_cell().store_slice(val).end_cell();
		}
		;; otherwise cat_table is null which is reasonable for actions
	}
	;; 11 VSet: set specified value to specified subdomain->category
	if (op == 11) {
		cell new_value = in_msg~load_ref();
		cat_table~idict_set_ref(16, cat, new_value);
		throw_unless(36, ;; operation failed?!
			root~pfxdict_set?(1023, name, cat_table.begin_parse()));
		return store_data(stored_seqno + 1, public_key, root);
	}
	;; 12 VDel: delete specified subdomain->category value
	if (op == 12) {
		throw_unless(37, ;; primary operation failed
			cat_table~idict_delete?(16, cat));
		if (cat_table.dict_empty?()) {
			;; cat table is empty, delete subdomain altogether
			throw_unless(36, ;; operation failed?!
				root~pfxdict_delete?(1023, name));
		} else {
			;; cat table still has some entries, update entry
			throw_unless(36, ;; operation failed?!
				root~pfxdict_set?(1023, name, cat_table.begin_parse()));			
		}
		return store_data(stored_seqno + 1, public_key, root);
	}
	;; 21 DSet: replace entire category dictionary of domain with provided
	if (op == 21) {
		cell new_cat_table = in_msg~load_ref();
		throw_unless(37, ;; primary operation failed
			root~pfxdict_set?(1023, name, new_cat_table.begin_parse()));					
		return store_data(stored_seqno + 1, public_key, root);
	}
	;; 22 DDel: delete entire category dictionary of specified domain
	if (op == 22) {
		throw_unless(37, ;; primary operation failed
			root~pfxdict_delete?(1023, name));
		return store_data(stored_seqno + 1, public_key, root);
	}
	;; 31 TSet: replace ENTIRE DOMAIN TABLE with the provided tree root cell
	if (op == 31) {
		cell new_tree_root = in_msg~load_ref();
		;; no sanity checks cause they would cost immense gas
		return store_data(stored_seqno + 1, public_key, new_tree_root);
	}
	;; 32 TDel: nullify ENTIRE DOMAIN TABLE
	if (op == 32) {
		return store_data(stored_seqno + 1, public_key, null());
	}
	;; 51 OSet: replace owner public key with a new one
	if (op == 51) {
		int new_public_key = in_msg~load_uint(256);
		;; good byte old owner, all hail to new owner!
		return store_data(stored_seqno + 1, new_public_key, root);
	}
	throw(44); ;; invalid operation
}

{-
	Data structure:
	Root cell: [UInt<32b>:seqno] [UInt<256b>:owner_public_key] 
			   [OptRef<1b+1r?>:Hashmap<PfxDict:Slice->CatTable>:domains]
	<CatTable> := HashmapE 16 ^DNSRecord
	<DNSRecord> := arbitary? not defined anywhere in documentation or internet!
	
	STORED DOMAIN NAME SLICE FORMAT: (#ZeroChars<7b>) (Domain name value)
	#Zeros allows to simultaneously store, for example, com\0 and com\0google\0
	That will be stored as \1com\0 and \2com\0google\0 (pfx tree has restricitons)
	This will allow to resolve more specific requests to subdomains, and resort
	    to parent domain next resolver lookup if subdomain is not found
	com\0goo\0 lookup will, for example look up \2com\0goo\0 and then
	    \1com\0goo\0 which will return \1com\0 (as per pfx tree) with -1 cat
-}

;;===========================================================================;;
;; Getter methods                                                            ;;
;;===========================================================================;;

int seqno() method_id { ;; Retrieve sequence number
  return get_data().begin_parse().preload_uint(32);
}

;;8m  dns-record-value
(int, cell) dnsresolve(slice subdomain, int category) method_id {
	cell Null = null(); ;; pseudo-alias
	throw_if(30, subdomain.slice_bits() % 8 != 0); ;; malformed input (~ 8n-bit)
	if (subdomain.slice_bits() == 0) { return (0, Null); } ;; zero-length input
	{- ;; Logic thrown away: return only first ZB-delimited subdomain,
	      appends \0 if neccessary (not required for pfx, \0 can be ap more eff)
	builder b_name = begin_cell();
	slice remaining = subdomain;
	int char = remaining~load_uint(8); ;; seems to be the most optimal way
	do {
		b_name~store_uint(char, 8);
		char = remaining~load_uint(8);
	} until ((remaining.slice_bits() == 0) | (char == 0));
	if (char == 0) { category = -1; }
	if ((remaining.slice_bits() == 0) & (char != 0)) {
		b_name~store_uint(0, 8); ;; string was not terminated with zero byte
	}
	cell c_name = b_name.end_cell();
	slice s_name = c_name.begin_parse();
	-}
	(_, int name_last_byte) = subdomain.slice_last(8).load_uint(8);
	if ((name_last_byte == 0) & (subdomain.slice_bits() == 8)) {
		return (0, Null); ;; zero-length input, but with zero byte
	}
	slice s_name = subdomain;
	if (name_last_byte != 0) {
		s_name = begin_cell().store_slice(subdomain) ;; append zero byte
		                     .store_uint(0, 8).end_cell().begin_parse();
	}
	(_, cell root) = get_data().begin_parse().skip_bits(32 + 256).load_dict();
	
	;; Multiple zero characters seem to be allowed as per github issue response
	;; Lets change the tactics!
		
	int zeros = 0;
	int loop = -1;
	slice cname = s_name;
	;; better safe then sorry, dont want to catch any of loop bugs
	while (loop) {
		int lval = cname~load_uint(8);
		if (lval == 0) { zeros += 1; }
		if (cname.slice_bits() == 0) { loop = 0; }
	}
	
	;; can't move below, will cause errors!
	slice pfx = cname; slice val = cname; 
	slice tail = cname; int succ = 0;
		
	while (zeros > 0) {
		slice pfname = begin_cell().store_uint(zeros, 7)
			.store_slice(s_name).end_cell().begin_parse();
		(slice _pfx, slice _val, slice _tail, int _succ) = 
			root.pfxdict_get?(1023, pfname);
		if (_succ) { zeros = 1; } ;; break
		zeros -= 1;
		setglob_slice(_pfx, 101);
		setglob_slice(_val, 102);
		setglob_slice(_tail, 103);
		setglob_int(_succ, 104);
	}
	
	;; Compiler cannot assign those outers inside while for some reason
	
	pfx = getglob_slice(101);
	val = getglob_slice(102);
	tail = getglob_slice(103);
	succ = getglob_int(104);
	
	zeros = pfx.preload_uint(7);
		
	if (~ succ) { 
		return (0, Null); ;; failed to find entry in prefix dictionary
	}
	if (~ tail.slice_empty?()) { ;; if we have tail then len(pfx) < len(subdomain)
		category = -1; ;; incomplete subdomain found, must return next resolver (-1)
	}
	int pfx_bits = pfx.slice_bits() - 7;
	cell cat_table = begin_cell().store_slice(val).end_cell();
	;; pfx.slice_bits() will contain 8m, where m is number of bytes in subdomain 
	;;   COUNTING for the zero byte (if structurally correct: no multiple-ZB keys)
	;;   which corresponds to "8m, m=one plus the number of bytes in the subdomain found)
	if (category == 0) {
		return (pfx_bits, cat_table); ;; return cell with entire dictionary for 0
	} else {
		cell cat_found = cat_table.idict_get_ref(16, category);
		{- it seems that if subdomain is found but cat is not need to return (8m, Null)
		if (cat_found.cell_null?()) {
			pfx_bits = 0; ;; to return (0, Null) instead of (8m, Null)
			;; my thoughts about this requirement are in next block comment
		} -}
		return (pfx_bits, cat_found); ;; no need to unslice and cellize the poor cat now
		{- Old logic garbage, replaced with ref functions discovered
		;; dictionary category lookup
		(slice cat_value, int cat_found) = cat_table.idict_get?(16, category);
		if (~ cat_found) {
			;; we have failed to find the cat :(
			return (0, Null); 
		}
		;; cat is found, turn it's slices into cells
		return (pfx.slice_bits(), begin_cell().store_slice(cat_value).end_cell());
		-}
	}
}