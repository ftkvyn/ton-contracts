#!/usr/bin/env fift -s

/*
  /------------------------------------------------------------------------\
  | Created for: Telegram (Open Network) Blockchain Contest                |
  |      Task 2: DNS Resolver (Automatically registering)                  |
  >------------------------------------------------------------------------<
  | Script: Domain registration BoC BODY file generation script            |
  >------------------------------------------------------------------------<
  | Author: Oleksandr Murzin (tg: @skydev / em: alexhacker64@gmail.com)    |
  |         October 2019                                                   |
  \------------------------------------------------------------------------/
*/

"TonUtil.fif" include
"Asm.fif" include
{ .s 255 halt } : ^ // inspect stack tool

// Parameters: address payment domain cat value ...


{ cr ."/---------------------------------------[General information]------------------------------------------\" cr
  ."| Usage: " @' $0 type ." <address> <payment> <qid> <domain> <-r/-R/-> ..<.. <cat> <value> ..>.."
  @' $0 $len 23 swap - { ." " } swap dup 0 <= { 2drop } { times ."|" } cond cr
  ."| Prepares a file, that can be sent as a message to contract to register the domain with set contents. |" cr
  ."| Make sure to get acquainted with prices of target domain registration contract, and estimate required|" cr
  ."| payment with, for example, calcregprice function (or getppr/c/b) and then add at least 1 Gram above. |" cr
  ."| Extra grams not used for paying for domain, forwarding fees and gas will be returned to sender wallet|" cr
  ."| !!! This file must be used ONLY with Automatically controlled DNS Resolver contract (adns-create.fif)|" cr
  ."| !!! Resulting query will be saved to body-adns-reg-<domain>.boc and needs to be encapsulated by your |" cr
  ."|     wallet scripts or software before being sent into a network! You can't just send resulting file! |" cr
  .">--------------------------------------[Parameters description]----------------------------------------<" cr
  ."| !!!     You must not specify < and > or [ and ] characters, only text value of the parameter     !!! |" cr
  ."| <address> may contain contract address (in any form) or filename of .addr file (with / without ext)  |" cr
  ."| <payment> must contain amount of Grams to pay for registration (extra unused will be returned)       |" cr
  ."| <qid> defines query id for the message, may remain 0 or 1 for simple messages from simple wallets    |" cr
  ."| <domain> has to contain domain (subdomain) name in text form that is to be registered                |" cr
  ."| <-r/-R/-> a.k.a. <flags> has to contain -r or -R or - !!! It can not be omitted for this script!     |" cr
  ."|  -r activates robot mode (output will be more friendly to robots or interfacing program)             |" cr
  ."|  -R activates full robot mode (without writing to files at all, ensure saving or processing output!) |" cr
  ."|  -  does not activate any special mode (human interaction mode with more info and stylish tables)    |" cr
  .">---[  PARAMETERS LOOP: Following variable pair can be present as much times as needed in params!  ]---<" cr
  ."| <category> needs to contain the Category ID value to be set in specified domain (16-bit signed int)  |" cr
  ."|     Special values: -1 is the next contract address for resolving subdomains, 0 should not be used,  |" cr
  ."| !!!! You HAVE TO set value in -2 category to some contract's address you control if you want to be   |" cr
  ."|      able to change or even prolong (yes, that also requires ownership) the registered domain later!!|" cr
  ."| <value> is to contain the value that will be assigned to domain and category provided above          |" cr
  ."|      ! In case of category duplication only the last encountered value will actually be used !       |" cr
  .">---------------------------------------[Use with binary data]-----------------------------------------<" cr
  ."| Some of the parameters can be written in special form in order to use binary data from existing file |" cr
  ."|   or to encode hexadecimal value that will be decoded into binary value: <domain> and <value>.       |" cr
  ."| In order to read binary data from a file parameter must begin with F: and contain full file name.    |" cr
  ."| If binary data encoded in hexadecimal form is used, parameter must begin with prefix H: or X:.       |" cr
  ."| <address> or <value> can also contain address in well-defined format (wc:hexadr, base64 or base64url)|" cr
  ."\------------------------------------------------------------------------------------------------------/" cr  
  cr 1 halt
} : usage

$# 7 >= ' usage ifnot // Verify argument count
// $# 7 <= ' usage ifnot no upper bound this time
$# 5 - 2 mod 0= { ."Error: Unmatched category-value pair!" cr 21 halt } ifnot

$1      =: AAddress
$2 $>GR =: Paym
$3 parse-int =: QueryId
$4      =: ADomain
$5      =: Flags

// Need to go REALLY DEEP with parameters processing in fift this time around...!!!
// { char ) word "$" swap $+ 1 { find 0= abort"undefined parameter" execute } } ::_ $(

variable RMode     false RMode  !
variable FRMode    false FRMode !
Flags "-r" $= { true RMode ! } if
Flags "-R" $= { true RMode ! true FRMode ! } if

RMode  @ =: RM
FRMode @ =: FRM

variable AddrWC
variable Addr

// Copied from mdns-setdom.fif of task 3

{ dup 0 -rot -1 swap { 8 u@+ swap dup dup 32 >= swap 127 <= and { drop } { 
0 = swap dup sbits 0 = rot and { -1 4 exch drop } { nip 0 swap } cond } cond dup sbits 0 = } until drop
{ dup sbits 8 / rot + $@ type } // Can print as text (far var is -1 if has \0 at end)
{ nip dup sbits 8 / dup 36 = // Should print as hex, but may be it is an address?
{ drop 256 u@+ 32 u@ dup 0 = swap dup 1 = rot or { swap 4 ."Addr:" .Addr } { B@ Bx. } cond }
{ B@ ."0x" Bx. } cond } 
cond } : PrintSliceMaybeText // Allows \0 at the end

// If address is still not resolved and it is SMCA address in any format
Addr @ null? AAddress $>smca dup { nip -rot 2over and {
	Addr ! AddrWC ! 2drop
} if } { 2drop } cond

// Last resort - consider it as a file name
variable AddrFile
Addr @ null? {
	AAddress file-exists? {
		AAddress AddrFile !
	} { 
		AAddress +".addr" file-exists? {
			AAddress +".addr" AddrFile !
		} { 
			."Error: Unable to determine and parse address in any of possible ways!"
			cr 3 halt
		} cond
	} cond
	RM { ."Loading address from " AddrFile @ type ."..." cr } ifnot
	// Now need to load file from AddrFile
	AddrFile @ file>B dup Blen dup 36 = {
		."Error: Incorrect address file length, expected 36 bytes, got " . ."bytes"
		cr 6 halt
	} ifnot drop
	256 B>u@+ swap 16 B>i@ AddrWC ! Addr !
} if

{ dup @ dup $len 2 > {
	2 $| swap
	dup "F:" $= swap dup "f:" $= rot or 
	{ -rot dup file-exists? 
	{ ."Error: Parameter file " type ." does not exist!" cr 9 halt } ifnot 
	file>B <b swap B, b> <s swap ! drop
	} {
		dup "X:" $= swap dup "H:" $= swap dup "x:" $= swap "h:" $= or or or
		{ x>B <b swap B, b> <s swap ! }
		{ drop dup @ $>s swap ! } cond
	} cond
} { drop dup @ $>s swap ! } cond } : ProcVarPfx

variable Domain ADomain Domain ! Domain ProcVarPfx

RM { ."Building table for domain " Domain @ PrintSliceMaybeText ."..." cr } ifnot
variable tmp
variable ho 0 ho !
$# 4 - 2 / =: PairCnt // that many cats
// start with $6 $7 : Cat Value
0 { 
	dup "$" 6 rot 2* + (.) $+ find 0= abort"wtf" execute // that all to get single cat off the tree...
	(number) 1 = // Still cant trust the user
	{ dup -32768 >= over 32767 <= and { ."Error: Category must be a signed 16-bit number, provided "
		."input is out of bounds!" cr 7 halt } ifnot }
	{ ."Error: Category must be a signed 16-bit number, provided input is not a number!" cr 8 halt } cond
	RM not dup 0 = and { ."Warning: Zero category should not be used!" cr } if	
	swap dup "$" 7 rot 2* + (.) $+ rot swap find 0= abort"wtf" execute // and that's to get it's value from it!
	dup $>smca {
		drop <b swap 256 u, swap 32 u, b> <s nip
	} {
		tmp dup -rot ! ProcVarPfx tmp @
	} cond 
	RM { 2dup swap ."-  " (.) type .": " PrintSliceMaybeText cr } ifnot
	over -2 = { -1 ho ! } if
	pair swap 1+
} PairCnt times
list variable Pairs Pairs !

RM { ho @ { ."WARNING: Domain has no owner defined! Update and prolong will not be possible!" cr } ifnot } ifnot

// Add ending zero char to Domain if missing
Domain @ dup sbits 8 / dup -rot B@ swap 1- B| 8 B>u@ nip 0 = 
{ Domain @ sbits 1008 <= { ."Error: Domain name without \0 is too long (max 126 chars)" cr 15 halt } ifnot
<b Domain @ s, 0 8 u, b> <s Domain ! } ifnot

// Some more checks for lengths, and determine inlinity
Domain @ dup sbits 1016 <= { ."Error: Domain name is too long (max 127 chars)" cr 13 halt } ifnot

// Value @ sbits 1016 <= { ."Error: Value is too long (max 127 chars)" cr 14 halt } ifnot
Pairs @ { uncons swap unpair nip // iterate second element in each pair in Pairs list
sbits 1016 <= { ."Error: Value is too long (max 127 chars)" cr 14 halt } ifnot } PairCnt times drop

// We have Domain at stack top now, lets check amount of \0 characters
0 swap { 8 u@+ swap 0 = { swap 1+ swap } if dup sbits 0 = } until drop
1 = { ."Error: Domain name contains several zero code characters (including ending one)" cr 15 halt } ifnot

// This function is a bit unusual, we need to construct a int16 keyed dict first
dictnew Pairs @ { uncons swap unpair // this time we need both elements
<b swap sr, b> <s 3 roll rot swap 16 idict! 0= abort"idict! failed" swap } PairCnt times drop
=: CatTable

<b 0x72656764 32 u, 1 64 u, 
	<b Domain @ s, b> ref,
	CatTable ref,
b> =: Msg

"body-adns-reg-" ADomain $+ +".boc" =: BocFile
RM { BocFile file-exists? { ."Warning! BoC file will be overwritten!" cr } if } ifnot

Msg 2 boc+>B dup Blen =: IMLen =: IM

FRM { IM BocFile B>file
 RM { ."Query saved to " BocFile type cr } ifnot
} ifnot