{-
  Created for: Telegram (Open Network) Blockchain Contest
       Task 1: Multi-signature wallet
     Flavor 1: n, k and pub-key-list is static
               no partial-signed tx storage
               4-search-tree is used for public key storage
               (may use more code storage, but should use less gas for search)
  Conditions: 0 < k <= n <= 100, 256-bit public keys
  Author: Oleksandr Murzin (tg: @skydev / em: alexhacker64@gmail.com)
          September - October 2019
-}

;; stdlib.fc partial, copied for more stability and more independence from external factors
int now() asm "NOW";
int slice_hash(slice s) asm "HASHSU";
int check_signature(int hash, slice signature, int public_key) asm "CHKSIGNU";
int check_data_signature(slice data, slice signature, int public_key) asm "CHKSIGNS";
cell get_data() asm "c4 PUSH";
() set_data(cell c) impure asm "c4 POP";
() accept_message() impure asm "ACCEPT";
slice begin_parse(cell c) asm "CTOS";
() end_parse(slice s) impure asm "ENDS";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
cell preload_ref(slice s) asm "PLDREF";
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
int slice_bits(slice s) asm "SBITS";
int slice_refs(slice s) asm "SREFS";
builder begin_cell() asm "NEWC";
cell end_cell(builder b) asm "ENDC";
builder store_ref(builder b, cell c) asm(c b) "STREF";
() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";
cell new_dict() asm "NEWDICT";
(slice, int) udict_get?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGET" "NULLSWAPIFNOT";
(cell, ()) ~udict_set_builder(cell dict, int key_len, int index, builder value) asm(value index dict key_len) "DICTUSETB";

;; Actually, equivalent to dictionaries, provided for clarity
(slice, cell) load_opt_ref(slice s) asm( -> 1 0) "LDOPTREF";
;; builder store_opt_ref(builder b, cell c) asm(c b) "STOPTREF";

{-
  Data structure definition:
    Root Cell: seqno(32), n(8), k(8)
         Refs: Reference to public key tree root
    Tree node cell: #PK(2) RF-1  PK1(256)  RF-2  [PK2(256)] [RF-3] [PK3(256)] [RF-4(1)]
              Refs:       [ST-1]          [ST-2]            [ST-3]            [ST-4]
      Subtree cond:          x<PK1       PK1<x<PK2         PK2<x<PK3         PK3<x
  Tree definition: 4-ary search tree (visually represented and described above)
  #PK: Number of public keys, PKn: Public key n, RF-n: Reference flag n, ST-n: Subtree n
-}

;; Find public key in 4ST, slice should be provided starting with #PK
int find_public_key(int public_key, slice s) {
  int pkn = s~load_uint(2);
  if (pkn == 0) { return false; } ;; empty node?
  var st1 = s~load_opt_ref();
  int pk1 = s~load_uint(256);
  if (public_key == pk1) { return true; }
  if (public_key < pk1) { ;; pk < PK1, travel to ST1
    if (null?(st1)) { return false; }
    return find_public_key(public_key, st1.begin_parse());
  }
  var st2 = s~load_opt_ref();
  ;; pk > PK1 at this moment for sure
  if (pkn == 1) { ;; #PK = 1, ST2 has all pk > PK1
    if (null?(st2)) { return false; }
    return find_public_key(public_key, st2.begin_parse());
  }
  ;; pkn >= 2 at this moment for sure
  int pk2 = s~load_uint(256);
  if (public_key == pk2) { return true; }
  if (public_key < pk2) { ;; pk < PK2, travel to ST2
    if (null?(st2)) { return false; }
    return find_public_key(public_key, st2.begin_parse());
  }
  var st3 = s~load_opt_ref();
  ;; pk > PK2 at this moment for sure
  if (pkn == 2) { ;; #PK = 2, ST3 has all pk > PK2
    if (null?(st3)) { return false; }
    return find_public_key(public_key, st3.begin_parse());
  }
  ;; pkn >= 3 at this moment for sure (must be = 3)
  int pk3 = s~load_uint(256);
  if (public_key == pk3) { return true; }
  var st4 = s~load_opt_ref();
  ;; pk > PK3 at this moment for sure, only st4 now remains
  if (null?(st4)) { return false; }
  return find_public_key(public_key, st4.begin_parse());
}

() recv_internal({-int msg_value, cell in_msg_cell,-} slice in_msg) impure {
  ;; ignored
}

{-
  Message structure:
  First cell: #Sig(8), seqno(32), valid_until(32), [Mode1(8), Mode2(8), Mode3(8)]
              REF to first sig cell (Sig1Ref), REFs(1-3) to message cells (MsgNRef)
  Hash calc: with #Sig and Sig1Ref sliced off before calculation
  Signature cell: PublicKey(256), Signature(512), REF to next sig cell
-}

() recv_external(slice in_msg) impure {
  var ds = get_data().begin_parse();
  var (stored_seqno, n, k) = (ds~load_uint(32), ds~load_uint(8), ds~load_uint(8));
  var tree_root = ds~load_ref();
  if ((stored_seqno == 0) & (in_msg.slice_bits() < 72)) {
    accept_message();
    set_data(begin_cell()
      .store_uint(stored_seqno + 1, 32)
      .store_uint(n, 8).store_uint(k, 8)
      .store_ref(tree_root)
      .end_cell());
    return ();
  }
  int nsig = in_msg~load_uint(8);
  var sigref = in_msg~load_ref();
  var cs = in_msg;
  var csh = slice_hash(in_msg);
  var (msg_seqno, valid_until) = (cs~load_uint(32), cs~load_uint(32));
  throw_if(35, valid_until < now());
  throw_if(36, nsig < k);
  ;; throw_if(36, nsig > n);
  ;; ^ Uncomment for strict count checking or ignore if more than n otherwise
  throw_unless(33, msg_seqno == stored_seqno);
  int valid_sigs = 0;
  var used_pks = new_dict(); ;; protect against multiple signatures by one key
  while (nsig > 0) {
    nsig -= 1;
    var ss = sigref.begin_parse();
    var spk = ss~load_uint(256);
    var ssig = ss~load_bits(512);
    throw_unless(34, check_signature(csh, ssig, spk));
    var (upkv, upkf) = used_pks.udict_get?(256, spk);
    throw_if(39, upkf); ;; gotcha
    if (find_public_key(spk, tree_root.begin_parse())) {
      valid_sigs += 1;
      used_pks~udict_set_builder(256, spk, begin_cell());
    } ;; else { throw(37); }
    ;; ^ Uncomment for strict signature checking or ignore unknown otherwise
    if (nsig > 0) { sigref = ss~load_ref(); }
    ss.end_parse();
  }
  throw_if(38, valid_sigs < k);
  accept_message();
  cs~touch();
  while (cs.slice_refs()) {
    var mode = cs~load_uint(8);
    send_raw_message(cs~load_ref(), mode);
  }
  cs.end_parse();
  set_data(begin_cell()
      .store_uint(stored_seqno + 1, 32)
      .store_uint(n, 8).store_uint(k, 8)
      .store_ref(tree_root)
      .end_cell());
}

;; Get methods

int seqno() method_id { ;; Retrieve sequence number
  return get_data().begin_parse().preload_uint(32);
}

;; Comment following if not needed: saves around 60 bytes in BOC

int getn() method_id { ;; Retrieve n (number of all public keys)
  return get_data().begin_parse().skip_bits(32).preload_uint(8);
}

int getk() method_id { ;; Retrieve k (number of required signatures)
  return get_data().begin_parse().skip_bits(40).preload_uint(8);
}

int findpk(int public_key) method_id { ;; Check if public key is registered in wallet
  return find_public_key(public_key, get_data().begin_parse().preload_ref().begin_parse());
}
