;; Simple multisignature wallet smart contract

(cell, int) udict_add?(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUADD";
(cell, ()) ~udict_set(cell dict, int key_len, int index, slice value) asm(value index dict key_len) "DICTUSET";
(cell) empty_cell () asm "NEWC" "ENDC";
(slice) empty_slice () asm "NEWC" "ENDC" "CTOS";
(slice) get_address () asm "MYADDR";
(int, int) parse_address (slice) asm "REWRITESTDADDR";

(int) length(tuple t1) asm "TLEN";
(tuple) empty_tuple() asm "NIL";
;; Note length should be manually checked (tuple length is less than 255)
(tuple, ()) ~append_i(tuple t1, int t2) asm(t1 t2) "COMMA";
(tuple, ()) ~append_t(tuple t1, tuple t2) asm(t1 t2) "COMMA";
(tuple, ()) ~append_c(tuple t1, cell t2) asm(t1 t2) "COMMA";
(tuple, ()) ~append_s(tuple t1, slice t2) asm(t1 t2) "COMMA";




() recv_internal(slice in_msg) impure {
  ;; do nothing for internal messages
}

() process_order(cell messages_dict) impure {
  int message_index = -1; 
  ifnot ( messages_dict.dict_empty?()) {
    do {
      (message_index, slice message_root, int found) = messages_dict.udict_get_next?(7, message_index);
      if (found) {      
        (int mode, cell message_body) = (message_root~load_int(8), message_root~load_ref());
        send_raw_message(message_body, mode);
      }
    } until ( ~ found );  
  }
}


int check_provided_signatures_stairs(slice cs, 
                                     int initial_bitstring, 
                                     slice main_info, 
                                     cell keys_dict) inline {
  int stop = 0;
  initial_bitstring~touch();
  dump_stack();
  do {
    ifnot (cs.slice_data_empty?()) {
      (slice signature, int pubkey, int proof_token) = (cs~load_bits(512), cs~load_uint(256), cs~load_uint(255));
      (slice skey_index, int found_key) = keys_dict.udict_get?(256, pubkey);
      throw_unless(45, found_key);
      int key_index = skey_index~load_uint(8);
      int proof_seed = cell_hash(begin_cell().store_slice(main_info).store_uint(proof_token, 255).end_cell());   
      throw_unless(46, check_signature(proof_seed, signature, pubkey));
      initial_bitstring |= ( 1 << key_index );
      ifnot(cs.slice_refs_empty?()) {
        cs = cs~load_ref().begin_parse();
      } else {
        stop = -1;
      }      
    } else {
      stop = -1;
    }
  } until (stop);
  initial_bitstring~touch();
  dump_stack();
  return initial_bitstring;                                   
}

int calc_ones(int bitstring) inline {
  int ones = 0;
  do {
    ones += bitstring & 1;
    bitstring = bitstring >> 1;
  } until (bitstring == 0);
  ones~touch();
  dump_stack();

  return ones;
}
int get_uniq_token () inline {
  (int wc, int hsh) = parse_address(get_address());
  return (hsh >> 192);
}

cell store_order(cell stored_orders, int order_index, int per_order_seqno,
                 int valid_until, int min_signature_num, int provided_signatures_bitlist, cell order_dict) inline {
                 builder order = begin_cell()
                                   .store_uint(per_order_seqno, 16)
                                   .store_uint(valid_until, 32)
                                   .store_uint(min_signature_num, 8)
                                   .store_uint(provided_signatures_bitlist, 255)
                                   .store_dict(order_dict);
                 stored_orders~udict_set_builder(32, order_index, order);
                 return stored_orders;
}

cell delete_order(cell stored_orders, int order_index) inline {
  stored_orders~udict_delete?(32, order_index);
  return stored_orders;
}

() upgrade_contract (slice new_init) impure {
  ifnot(new_init.slice_refs_empty?()) {
    cell code = new_init~load_ref();
    set_code(code);
  }
  ifnot(new_init.slice_refs_empty?()) {
    cell data = new_init~load_ref();
    set_data(data);
  }
}

;; Potentially expensive method. However it is used only during contract upgrade.
;; TODO just get max_pubkey in storage and read its body
int number_of_keys() method_id {
  slice data_slice = get_data().begin_parse();
  slice unused_data = data_slice~load_bits(32 + 8) ;
  cell keys = data_slice~load_dict();
  var counter = 0;
  ifnot ( keys.dict_empty?()) {
    int pubkey = -1; 
    do {
      (pubkey, slice signature_slice, int found_pk) = keys.udict_get_next?(256, pubkey);
      if (found_pk) {      
        counter += 1;
      }
    } until ( ~ found_pk )
  }
  return counter;
}

cell collect_outdated_orders(cell orders) {
  ifnot ( orders.dict_empty?()) {
    int order_index = -1; 
    int t = now();
    do {
      (order_index, slice order_root, int found) = orders.udict_get_next?(32, order_index);
      if (found) {       
        (int per_order_seqno, int valid_until) = (order_root~load_uint(16), order_root~load_uint(32));
        if(t > valid_until) {
          orders~udict_delete_get?(32, order_index);
        }
      }
    } until ( ~ found );  
  }
  return orders;
}


() recv_external(slice in_msg) impure {
  slice sd = get_data().begin_parse();
  (int seqno,        int default_threshold_num, cell keys_dict, cell stored_orders) =
  (sd~load_uint(32), sd~load_uint(8),           sd~load_dict(), sd~load_dict());  
  stored_orders.begin_parse();
  if( seqno == 0 ) {
    accept_message();
      set_data(begin_cell().store_uint(1, 32)
                       .store_uint(default_threshold_num, 8)
                       .store_dict(keys_dict)
                       .store_dict(stored_orders)
          .end_cell());
    return ();
  }

  slice head_signature = in_msg~load_bits(512);
  slice in_msg = in_msg~load_ref().begin_parse();
  int head_pubkey = in_msg~load_uint(256);
  (slice shead_key_index, int found_head_key) = keys_dict.udict_get?(256, head_pubkey);
  throw_unless(40, found_head_key);
  int head_key_index = shead_key_index~load_uint(8);
  slice cs = in_msg;
  slice provided_signatures_stairs = cs~load_ref().begin_parse();
  int proof_token = slice_hash(provided_signatures_stairs) >> 1;
  int proof_seed = cell_hash(begin_cell().store_slice(cs).store_uint(proof_token, 255).end_cell());   
  throw_unless(34, check_signature(proof_seed, head_signature, head_pubkey));
  slice order_info = cs;
  int operation = order_info~load_uint(8);
  int time = now();
  int uniq_token = get_uniq_token(); ;; Todo addr and time both in c7, optimize?
  if (operation == 1) {
    int provided_seqno = order_info~load_uint(32);
    throw_unless(41, provided_seqno == seqno);
    int provided_time_bound = order_info~load_uint(32);
    throw_if(42, provided_time_bound < time);
    int min_signature_num = order_info~load_uint(8);
    throw_if(43, min_signature_num < default_threshold_num);
    int provided_uniq_token = order_info~load_uint(64);
    throw_unless(44, provided_uniq_token == uniq_token);
    cell order_dict = order_info~load_dict();
    accept_message();   
    seqno += 1;
    int provided_signatures_bitlist =  check_provided_signatures_stairs(provided_signatures_stairs,
                                                                    1 << head_key_index,
                                                                    cs,
                                                                    keys_dict);
    int provided_signatures_num = calc_ones(provided_signatures_bitlist);
    if (provided_signatures_num >= min_signature_num) {
      process_order(order_dict);
      stored_orders = delete_order(stored_orders, seqno);
    } else {
      stored_orders = store_order(stored_orders, seqno, 0, provided_time_bound, min_signature_num, provided_signatures_bitlist, order_dict);
    }
    
  }
  if (operation == 2) {
    int order_index = order_info~load_uint(32);
    (slice order_root, int order_found) = stored_orders.udict_get?(32, order_index);   
    throw_unless(48, order_found);
    int provided_uniq_token = order_info~load_uint(64);
    throw_unless(49, provided_uniq_token == uniq_token);
    int per_order_seqno = order_root~load_uint(16);
    int provided_per_order_seqno = order_info~load_uint(16);
    throw_unless(50, provided_per_order_seqno == per_order_seqno);
    accept_message();
    (int valid_until, int min_signature_num, int stored_signatures_bitlist, cell order_dict) =
    (order_root~load_uint(32), order_root~load_uint(8), order_root~load_uint(255), order_root~load_dict());
    if(valid_until > time) {
      stored_signatures_bitlist |= (1 << head_key_index);
      stored_signatures_bitlist =  check_provided_signatures_stairs(provided_signatures_stairs,
                                                                    stored_signatures_bitlist ,
                                                                    cs,
                                                                    keys_dict);
      int provided_signatures_num = calc_ones(stored_signatures_bitlist);
      provided_signatures_num~touch();
      if (provided_signatures_num >= min_signature_num) {
        process_order(order_dict);
        stored_orders = delete_order(stored_orders, order_index);
      } else {
        stored_orders = store_order(stored_orders, order_index, per_order_seqno + 1,
                                      valid_until, min_signature_num, stored_signatures_bitlist, order_dict);
      }
    } 
  }
  if (operation == 3) {
    int provided_signatures_bitlist =  check_provided_signatures_stairs(provided_signatures_stairs,
                                                                    1 << head_key_index,
                                                                    cs,
                                                                    keys_dict);
    int provided_signatures_num = calc_ones(provided_signatures_bitlist);                                                                    
    throw_if(51, provided_signatures_num < number_of_keys());
    upgrade_contract(order_info);
    return (); 
  }
  stored_orders = collect_outdated_orders(stored_orders);
  set_data(begin_cell().store_uint(seqno, 32)
                       .store_uint(default_threshold_num, 8)
                       .store_dict(keys_dict)
                       .store_dict(stored_orders)
          .end_cell());
}

;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

int order_seqno(int order_id) method_id {
  slice data_slice = get_data().begin_parse();
  slice unused_data = data_slice~load_bits(32 + 8) ;
  (cell m, cell stored_orders) = (data_slice~load_dict(),
                                  data_slice~load_dict());
  (slice order_root_cell, int found) = stored_orders.udict_get?(32, order_id);
  throw_unless(38, found);
  int per_order_seqno_stored = order_root_cell~load_uint(16);
  return per_order_seqno_stored;
}

cell all_pending_orders() method_id {
  cell result = new_dict();
  slice data_slice = get_data().begin_parse();
  slice unused_data = data_slice~load_bits(32 + 8) ;
  (cell m, cell stored_orders) = (data_slice~load_dict(),
                                  data_slice~load_dict());
  ifnot ( stored_orders.dict_empty?()) {
    int order_index = -1; 
    do {
      (order_index, slice order_root, int found) = stored_orders.udict_get_next?(32, order_index);
      if (found) {       
          result~udict_add?(32, order_index, order_root );
        }
    } until ( ~ found );  
  }
  return result;
}

;; Return id of first 255 pending orders
tuple pending_orders() method_id {
  var result = empty_tuple();
  slice data_slice = get_data().begin_parse();
  slice unused_data = data_slice~load_bits(32 + 8) ;
  (cell m, cell stored_orders) = (data_slice~load_dict(),
                                  data_slice~load_dict());
  int counter = 0;
  ifnot ( stored_orders.dict_empty?()) {
    int order_index = -1; 
    do {
      (order_index, slice order_root, int found) = stored_orders.udict_get_next?(32, order_index);
      if (found) {       
          result~append_i(order_index);
          counter += 1;
        }
    } until ( (~ found) + (counter > 254) );  
  }
  return result;
}

(int, int, int, int, slice) parse_common_message(slice msg) method_id {
  int ident = msg~load_uint(1);
  int ihr_disabled = msg~load_uint(1);
  int bounce = msg~load_uint(1);
  int bounced = msg~load_uint(1);
  (slice src_s, slice dest_s)  = (msg~load_msg_addr(), msg~load_msg_addr() );
  (int wc, int destination_addr) = parse_std_addr(dest_s);
  int gram_l = msg~load_uint(4);
  int nanograms = msg~load_uint(gram_l * 8);
  cell other_currencies = msg~load_dict();
  int ihr_fee_l = msg~load_uint(4);
  int ihr_fee = msg~load_uint(ihr_fee_l * 8);
  int fwd_fee_l = msg~load_uint(4);
  int fwd_fee = msg~load_uint(fwd_fee_l * 8);
  int created_lt = msg~load_uint(64);
  int created_at = msg~load_uint(32);
  return (wc, destination_addr, nanograms, bounce, msg);
}

cell all_pending_orders_by_key(int pubkey, int signed?) method_id {
  cell result = new_dict();
  slice data_slice = get_data().begin_parse();
  slice unused_data = data_slice~load_bits(32 + 8) ;
  (cell m, cell stored_orders) = (data_slice~load_dict(),
                                  data_slice~load_dict());
  ifnot ( stored_orders.dict_empty?()) {
    int order_index = -1; 
    do {
      (order_index, slice order_root, int found) = stored_orders.udict_get_next?(32, order_index);
      if (found) {   
          (slice temp, slice unused_data)  = order_root.load_bits(16 + 32 + 8 + 8);
          cell obtained_signatures = temp~load_dict();
          (slice unused_data, int found) = obtained_signatures.udict_get?(256, pubkey);
          if(found == signed?) {
            result~udict_add?(32, order_index, order_root );
          }
        }  
    } until ( ~ found );  
  }
  return result;
}
cell all_pending_orders_unsigned_by_key(int pubkey) method_id {
  return all_pending_orders_by_key(pubkey, 0);
}
cell all_pending_orders_signed_by_key(int pubkey) method_id {
  return all_pending_orders_by_key(pubkey, 1);
}

tuple pending_orders_by_key(int pubkey, int signed?) method_id {
  var result = empty_tuple();
  int counter = 0;
  slice data_slice = get_data().begin_parse();
  slice unused_data = data_slice~load_bits(32 + 8 ) ;
  (cell m, cell stored_orders) = (data_slice~load_dict(),
                                  data_slice~load_dict());
  ifnot ( stored_orders.dict_empty?()) {
    int order_index = -1; 
    do {
      (order_index, slice order_root, int found) = stored_orders.udict_get_next?(32, order_index);
      if (found) {   
          (slice temp, slice unused_data)  = order_root.load_bits(16 + 32 + 8 + 8);
          cell obtained_signatures = temp~load_dict();
          (slice unused_data, int found) = obtained_signatures.udict_get?(256, pubkey);
          if(found == signed?) {
            result~append_i(order_index);
            counter += 1;
          }
        }  
    } until ( (~ found) + (counter > 254) );  
  }
  return result;
}
tuple pending_orders_unsigned_by_key(int pubkey) method_id {
  return pending_orders_by_key(pubkey, 0);
}
tuple pending_orders_signed_by_key(int pubkey) method_id {
  return pending_orders_by_key(pubkey, -1);
}

tuple show_order(order_id) method_id {
  var result = empty_tuple();
  slice data_slice = get_data().begin_parse();
  slice unused_data = data_slice~load_bits(32 + 8) ;
  (cell m, cell stored_orders) = (data_slice~load_dict(),
                                  data_slice~load_dict());
  var result = empty_tuple();
  ifnot ( stored_orders.dict_empty?()) {
      (slice order_root, int found) = stored_orders.udict_get?(32, order_id);
      if (found) {   
          (slice temp, slice unused_data)  = order_root.load_bits(16 + 32 + 8 + 8);
          cell obtained_signatures = temp~load_dict();
          cell messages = temp~load_dict();
          int mid = -1;          
          do {
             (mid, slice message, int found_m) = messages.udict_get_next?(7, mid);
             if (found_m) {   
               var subres = empty_tuple();
               int mode = message~load_uint(8);
               subres~append_i(mode);
               cell message_body_c = message~load_ref();
               slice message_body = message_body_c.begin_parse();
               (int wc, int destination_addr, int nanograms, int bounce, slice msg) = parse_common_message(message_body);
               subres~append_i(wc);
               subres~append_i(destination_addr);
               subres~append_i(nanograms);
               subres~append_i(bounce);               
               ;; drop msg: cannot show in userfriendly format anyway
               result~append_t(subres);
             }  
           } until ( ~ found_m );    
        }  
  } 
  return result;
}

;; Returns n and k (threshold and overall number of keys) as well as keys themselves
tuple show_general_info() method_id {
  var result = empty_tuple();
  slice data_slice = get_data().begin_parse();
  slice unused_data = data_slice~load_bits(32) ;
  int n = data_slice~load_uint(8);
  cell keys = data_slice~load_dict();
  var result = empty_tuple();
  var reskeys = empty_tuple();
  var counter = 0;
  ifnot ( keys.dict_empty?()) {
    int pubkey = -1; 
    do {
      (pubkey, slice signature_slice, int found_pk) = keys.udict_get_next?(256, pubkey);
      if (found_pk) {      
        reskeys~append_i(pubkey);
        counter += 1;
      }
    } until ( ~ found_pk )
  }
  result~append_i(n);
  result~append_i(counter);
  result~append_t(reskeys);
  return result;
}
